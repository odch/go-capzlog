// Code generated by go-swagger; DO NOT EDIT.

package external_system_flights

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"log"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new external system flights API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new external system flights API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new external system flights API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for external system flights API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ExternalSystemFlightsDelete(params *ExternalSystemFlightsDeleteParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer, opts ...ClientOption) (*ExternalSystemFlightsDeleteOK, error)

	ExternalSystemFlightsGet(params *ExternalSystemFlightsGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExternalSystemFlightsGetOK, error)

	ExternalSystemFlightsPost(params *ExternalSystemFlightsPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExternalSystemFlightsPostOK, error)

	ExternalSystemFlightsPostMultiple(params *ExternalSystemFlightsPostMultipleParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer, opts ...ClientOption) (*ExternalSystemFlightsPostMultipleOK, error)

	ExternalSystemFlightsPut(params *ExternalSystemFlightsPutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExternalSystemFlightsPutOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ExternalSystemFlightsDelete deletes an existing flight in capzlog aero
*/
func (a *Client) ExternalSystemFlightsDelete(params *ExternalSystemFlightsDeleteParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer, opts ...ClientOption) (*ExternalSystemFlightsDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExternalSystemFlightsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExternalSystemFlights_Delete",
		Method:             "DELETE",
		PathPattern:        "/api/pel/public/externalsystemflights/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExternalSystemFlightsDeleteReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExternalSystemFlightsDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExternalSystemFlights_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExternalSystemFlightsGet gets a flight from capzlog aero based on the external system unique ID
*/
func (a *Client) ExternalSystemFlightsGet(params *ExternalSystemFlightsGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExternalSystemFlightsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExternalSystemFlightsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExternalSystemFlights_Get",
		Method:             "GET",
		PathPattern:        "/api/pel/public/externalsystemflights/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExternalSystemFlightsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExternalSystemFlightsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExternalSystemFlights_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExternalSystemFlightsPost creates a flight in capzlog aero
*/
func (a *Client) ExternalSystemFlightsPost(params *ExternalSystemFlightsPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExternalSystemFlightsPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExternalSystemFlightsPostParams()
	}

	jsonData, _ := json.MarshalIndent(params, "", "  ")
	log.Printf("posting data to ExternalSystemFlights_Post: %s", jsonData)

	op := &runtime.ClientOperation{
		ID:                 "ExternalSystemFlights_Post",
		Method:             "POST",
		PathPattern:        "/api/pel/public/externalsystemflights",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExternalSystemFlightsPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExternalSystemFlightsPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExternalSystemFlights_Post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExternalSystemFlightsPostMultiple creates multiple flights in capzlog aero
*/
func (a *Client) ExternalSystemFlightsPostMultiple(params *ExternalSystemFlightsPostMultipleParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer, opts ...ClientOption) (*ExternalSystemFlightsPostMultipleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExternalSystemFlightsPostMultipleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExternalSystemFlights_PostMultiple",
		Method:             "POST",
		PathPattern:        "/api/pel/public/externalsystemflights/PostMultiple",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExternalSystemFlightsPostMultipleReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExternalSystemFlightsPostMultipleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExternalSystemFlights_PostMultiple: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExternalSystemFlightsPut modifies an existing flight in capzlog aero
*/
func (a *Client) ExternalSystemFlightsPut(params *ExternalSystemFlightsPutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExternalSystemFlightsPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExternalSystemFlightsPutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExternalSystemFlights_Put",
		Method:             "PUT",
		PathPattern:        "/api/pel/public/externalsystemflights/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExternalSystemFlightsPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExternalSystemFlightsPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExternalSystemFlights_Put: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
