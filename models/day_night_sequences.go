// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DayNightSequences day night sequences
//
// swagger:model DayNightSequences
type DayNightSequences string

func NewDayNightSequences(value DayNightSequences) *DayNightSequences {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DayNightSequences.
func (m DayNightSequences) Pointer() *DayNightSequences {
	return &m
}

const (

	// DayNightSequencesDay captures enum value "Day"
	DayNightSequencesDay DayNightSequences = "Day"

	// DayNightSequencesNight captures enum value "Night"
	DayNightSequencesNight DayNightSequences = "Night"

	// DayNightSequencesDayNight captures enum value "DayNight"
	DayNightSequencesDayNight DayNightSequences = "DayNight"

	// DayNightSequencesNightDay captures enum value "NightDay"
	DayNightSequencesNightDay DayNightSequences = "NightDay"

	// DayNightSequencesDayNightDay captures enum value "DayNightDay"
	DayNightSequencesDayNightDay DayNightSequences = "DayNightDay"

	// DayNightSequencesNightDayNight captures enum value "NightDayNight"
	DayNightSequencesNightDayNight DayNightSequences = "NightDayNight"
)

// for schema
var dayNightSequencesEnum []interface{}

func init() {
	var res []DayNightSequences
	if err := json.Unmarshal([]byte(`["Day","Night","DayNight","NightDay","DayNightDay","NightDayNight"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dayNightSequencesEnum = append(dayNightSequencesEnum, v)
	}
}

func (m DayNightSequences) validateDayNightSequencesEnum(path, location string, value DayNightSequences) error {
	if err := validate.EnumCase(path, location, value, dayNightSequencesEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this day night sequences
func (m DayNightSequences) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDayNightSequencesEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this day night sequences based on context it is used
func (m DayNightSequences) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
