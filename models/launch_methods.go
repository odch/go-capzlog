// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// LaunchMethods launch methods
//
// swagger:model LaunchMethods
type LaunchMethods string

func NewLaunchMethods(value LaunchMethods) *LaunchMethods {
	return &value
}

// Pointer returns a pointer to a freshly-allocated LaunchMethods.
func (m LaunchMethods) Pointer() *LaunchMethods {
	return &m
}

const (

	// LaunchMethodsNone captures enum value "None"
	LaunchMethodsNone LaunchMethods = "None"

	// LaunchMethodsAerotow captures enum value "Aerotow"
	LaunchMethodsAerotow LaunchMethods = "Aerotow"

	// LaunchMethodsWinch captures enum value "Winch"
	LaunchMethodsWinch LaunchMethods = "Winch"

	// LaunchMethodsCar captures enum value "Car"
	LaunchMethodsCar LaunchMethods = "Car"

	// LaunchMethodsSelf captures enum value "Self"
	LaunchMethodsSelf LaunchMethods = "Self"

	// LaunchMethodsBungee captures enum value "Bungee"
	LaunchMethodsBungee LaunchMethods = "Bungee"
)

// for schema
var launchMethodsEnum []interface{}

func init() {
	var res []LaunchMethods
	if err := json.Unmarshal([]byte(`["None","Aerotow","Winch","Car","Self","Bungee"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		launchMethodsEnum = append(launchMethodsEnum, v)
	}
}

func (m LaunchMethods) validateLaunchMethodsEnum(path, location string, value LaunchMethods) error {
	if err := validate.EnumCase(path, location, value, launchMethodsEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this launch methods
func (m LaunchMethods) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLaunchMethodsEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this launch methods based on context it is used
func (m LaunchMethods) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
