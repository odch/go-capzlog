// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SimulatorSessionInputBase Represents a SimulatorSession to be created in capzlog.aero
//
// swagger:model SimulatorSessionInputBase
type SimulatorSessionInputBase struct {

	// date
	// Required: true
	// Min Length: 1
	// Pattern: ^\d{4}\-(0[1-9]|1[0-2])\-(0[1-9]|[1-2][0-9]|3[0-1])$
	Date *string `json:"Date"`

	// day landings
	// Required: true
	// Maximum: 100
	// Minimum: 0
	DayLandings *int32 `json:"DayLandings"`

	// day takeoffs
	// Required: true
	// Maximum: 100
	// Minimum: 0
	DayTakeoffs *int32 `json:"DayTakeoffs"`

	// markers
	Markers []*Marker `json:"Markers"`

	// night landings
	// Required: true
	// Maximum: 100
	// Minimum: 0
	NightLandings *int32 `json:"NightLandings"`

	// night takeoffs
	// Required: true
	// Maximum: 100
	// Minimum: 0
	NightTakeoffs *int32 `json:"NightTakeoffs"`

	// pilot function
	// Required: true
	PilotFunction *PilotFunctions `json:"PilotFunction"`

	// remark
	Remark string `json:"Remark,omitempty"`

	// session time
	// Required: true
	// Min Length: 1
	// Pattern: ^\d{1-5}:[0-5][0-9]$
	SessionTime *string `json:"SessionTime"`

	// simulator
	Simulator *SimulatorInput `json:"Simulator,omitempty"`
}

// Validate validates this simulator session input base
func (m *SimulatorSessionInputBase) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDayLandings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDayTakeoffs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarkers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNightLandings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNightTakeoffs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePilotFunction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSessionTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSimulator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SimulatorSessionInputBase) validateDate(formats strfmt.Registry) error {

	if err := validate.Required("Date", "body", m.Date); err != nil {
		return err
	}

	if err := validate.MinLength("Date", "body", *m.Date, 1); err != nil {
		return err
	}

	if err := validate.Pattern("Date", "body", *m.Date, `^\d{4}\-(0[1-9]|1[0-2])\-(0[1-9]|[1-2][0-9]|3[0-1])$`); err != nil {
		return err
	}

	return nil
}

func (m *SimulatorSessionInputBase) validateDayLandings(formats strfmt.Registry) error {

	if err := validate.Required("DayLandings", "body", m.DayLandings); err != nil {
		return err
	}

	if err := validate.MinimumInt("DayLandings", "body", int64(*m.DayLandings), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("DayLandings", "body", int64(*m.DayLandings), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *SimulatorSessionInputBase) validateDayTakeoffs(formats strfmt.Registry) error {

	if err := validate.Required("DayTakeoffs", "body", m.DayTakeoffs); err != nil {
		return err
	}

	if err := validate.MinimumInt("DayTakeoffs", "body", int64(*m.DayTakeoffs), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("DayTakeoffs", "body", int64(*m.DayTakeoffs), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *SimulatorSessionInputBase) validateMarkers(formats strfmt.Registry) error {
	if swag.IsZero(m.Markers) { // not required
		return nil
	}

	for i := 0; i < len(m.Markers); i++ {
		if swag.IsZero(m.Markers[i]) { // not required
			continue
		}

		if m.Markers[i] != nil {
			if err := m.Markers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Markers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Markers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SimulatorSessionInputBase) validateNightLandings(formats strfmt.Registry) error {

	if err := validate.Required("NightLandings", "body", m.NightLandings); err != nil {
		return err
	}

	if err := validate.MinimumInt("NightLandings", "body", int64(*m.NightLandings), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("NightLandings", "body", int64(*m.NightLandings), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *SimulatorSessionInputBase) validateNightTakeoffs(formats strfmt.Registry) error {

	if err := validate.Required("NightTakeoffs", "body", m.NightTakeoffs); err != nil {
		return err
	}

	if err := validate.MinimumInt("NightTakeoffs", "body", int64(*m.NightTakeoffs), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("NightTakeoffs", "body", int64(*m.NightTakeoffs), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *SimulatorSessionInputBase) validatePilotFunction(formats strfmt.Registry) error {

	if err := validate.Required("PilotFunction", "body", m.PilotFunction); err != nil {
		return err
	}

	if err := validate.Required("PilotFunction", "body", m.PilotFunction); err != nil {
		return err
	}

	if m.PilotFunction != nil {
		if err := m.PilotFunction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PilotFunction")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PilotFunction")
			}
			return err
		}
	}

	return nil
}

func (m *SimulatorSessionInputBase) validateSessionTime(formats strfmt.Registry) error {

	if err := validate.Required("SessionTime", "body", m.SessionTime); err != nil {
		return err
	}

	if err := validate.MinLength("SessionTime", "body", *m.SessionTime, 1); err != nil {
		return err
	}

	if err := validate.Pattern("SessionTime", "body", *m.SessionTime, `^\d{1-5}:[0-5][0-9]$`); err != nil {
		return err
	}

	return nil
}

func (m *SimulatorSessionInputBase) validateSimulator(formats strfmt.Registry) error {
	if swag.IsZero(m.Simulator) { // not required
		return nil
	}

	if m.Simulator != nil {
		if err := m.Simulator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Simulator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Simulator")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this simulator session input base based on the context it is used
func (m *SimulatorSessionInputBase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMarkers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePilotFunction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSimulator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SimulatorSessionInputBase) contextValidateMarkers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Markers); i++ {

		if m.Markers[i] != nil {
			if err := m.Markers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Markers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Markers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SimulatorSessionInputBase) contextValidatePilotFunction(ctx context.Context, formats strfmt.Registry) error {

	if m.PilotFunction != nil {
		if err := m.PilotFunction.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PilotFunction")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PilotFunction")
			}
			return err
		}
	}

	return nil
}

func (m *SimulatorSessionInputBase) contextValidateSimulator(ctx context.Context, formats strfmt.Registry) error {

	if m.Simulator != nil {
		if err := m.Simulator.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Simulator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Simulator")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SimulatorSessionInputBase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SimulatorSessionInputBase) UnmarshalBinary(b []byte) error {
	var res SimulatorSessionInputBase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
