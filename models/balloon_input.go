// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BalloonInput balloon input
//
// swagger:model BalloonInput
type BalloonInput struct {

	// Required for new/non-existing balloons
	ICAODesignator string `json:"ICAODesignator,omitempty"`

	// registration
	// Required: true
	// Min Length: 1
	Registration *string `json:"Registration"`

	// The variant of the aircraft, in case several variants are available for the provided registration in capzlog.aero. If no variant is specified and there are multiple variants for the provided registration in capzlog.aero, one is selected randomly
	Variant string `json:"Variant,omitempty"`
}

// Validate validates this balloon input
func (m *BalloonInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRegistration(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BalloonInput) validateRegistration(formats strfmt.Registry) error {

	if err := validate.Required("Registration", "body", m.Registration); err != nil {
		return err
	}

	if err := validate.MinLength("Registration", "body", *m.Registration, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this balloon input based on context it is used
func (m *BalloonInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BalloonInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BalloonInput) UnmarshalBinary(b []byte) error {
	var res BalloonInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
