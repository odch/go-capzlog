// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FlightOutputBase Represents a flight in capzlog.aero
//
// swagger:model FlightOutputBase
type FlightOutputBase struct {

	// airborne time
	// Required: true
	// Min Length: 1
	// Pattern: ^\d{1-5}:[0-5][0-9]$
	AirborneTime *string `json:"AirborneTime"`

	// aircraft
	Aircraft *AircraftOutput `json:"Aircraft,omitempty"`

	// The end value of the aircraft counter. If provided, AircraftCounterStart must also be provided. The time between AircraftCounterStart and AircraftCounterEnd must be less than the flight time and equal to the airborne time if it is provided
	// Pattern: ^\d{1-5}:[0-5][0-9]$
	AircraftCounterEnd string `json:"AircraftCounterEnd,omitempty"`

	// The start value of the aircraft counter. If provided, AircraftCounterEnd must also be provided. The time between AircraftCounterStart and AircraftCounterEnd must be less than the flight time and equal to the airborne time if it is provided
	// Pattern: ^\d{1-5}:[0-5][0-9]$
	AircraftCounterStart string `json:"AircraftCounterStart,omitempty"`

	// are times local
	// Required: true
	AreTimesLocal bool `json:"AreTimesLocal"`

	// arrival airport
	// Required: true
	ArrivalAirport *AirportOutput `json:"ArrivalAirport"`

	// change i f r to v f r time
	// Pattern: ^([0-1][0-9]|2[0-3]):[0-5][0-9]$
	ChangeIFRToVFRTime string `json:"ChangeIFRToVFRTime,omitempty"`

	// change v f r to i f r time
	// Pattern: ^([0-1][0-9]|2[0-3]):[0-5][0-9]$
	ChangeVFRToIFRTime string `json:"ChangeVFRToIFRTime,omitempty"`

	// copi time
	// Required: true
	// Min Length: 1
	// Pattern: ^\d{1-5}:[0-5][0-9]$
	CopiTime *string `json:"CopiTime"`

	// date
	// Required: true
	// Min Length: 1
	// Pattern: ^\d{4}\-(0[1-9]|1[0-2])\-(0[1-9]|[1-2][0-9]|3[0-1])$
	Date *string `json:"Date"`

	// day landings
	// Required: true
	// Maximum: 100
	// Minimum: 0
	DayLandings *int32 `json:"DayLandings"`

	// day night sequence
	// Required: true
	DayNightSequence *DayNightSequences `json:"DayNightSequence"`

	// day takeoffs
	// Required: true
	// Maximum: 100
	// Minimum: 0
	DayTakeoffs *int32 `json:"DayTakeoffs"`

	// day time
	// Required: true
	// Min Length: 1
	// Pattern: ^\d{1-5}:[0-5][0-9]$
	DayTime *string `json:"DayTime"`

	// departure airport
	// Required: true
	DepartureAirport *AirportOutput `json:"DepartureAirport"`

	// dual time
	// Required: true
	// Min Length: 1
	// Pattern: ^\d{1-5}:[0-5][0-9]$
	DualTime *string `json:"DualTime"`

	// evening twilight time
	// Pattern: ^([0-1][0-9]|2[0-3]):[0-5][0-9]$
	EveningTwilightTime string `json:"EveningTwilightTime,omitempty"`

	// flight time
	// Required: true
	// Min Length: 1
	// Pattern: ^\d{1-5}:[0-5][0-9]$
	FlightTime *string `json:"FlightTime"`

	// i f r approaches
	// Required: true
	// Maximum: 100
	// Minimum: 0
	IFRApproaches *int32 `json:"IFRApproaches"`

	// i f r departures
	// Required: true
	// Maximum: 100
	// Minimum: 0
	IFRDepartures *int32 `json:"IFRDepartures"`

	// i f r time
	// Required: true
	// Min Length: 1
	// Pattern: ^\d{1-5}:[0-5][0-9]$
	IFRTime *string `json:"IFRTime"`

	// instructor time
	// Required: true
	// Min Length: 1
	// Pattern: ^\d{1-5}:[0-5][0-9]$
	InstructorTime *string `json:"InstructorTime"`

	// Used to specify if the flight is single pilot or multi pilot operation. Considered only for aircraft that can be flown both single and multi pilot
	IsMultiPilot bool `json:"IsMultiPilot,omitempty"`

	// landing time
	// Pattern: ^([0-1][0-9]|2[0-3]):[0-5][0-9]$
	LandingTime string `json:"LandingTime,omitempty"`

	// markers
	Markers []*Marker `json:"Markers"`

	// morning twilight time
	// Pattern: ^([0-1][0-9]|2[0-3]):[0-5][0-9]$
	MorningTwilightTime string `json:"MorningTwilightTime,omitempty"`

	// multi pilot time
	// Required: true
	// Min Length: 1
	// Pattern: ^\d{1-5}:[0-5][0-9]$
	MultiPilotTime *string `json:"MultiPilotTime"`

	// night landings
	// Required: true
	// Maximum: 100
	// Minimum: 0
	NightLandings *int32 `json:"NightLandings"`

	// night takeoffs
	// Required: true
	// Maximum: 100
	// Minimum: 0
	NightTakeoffs *int32 `json:"NightTakeoffs"`

	// night time
	// Required: true
	// Min Length: 1
	// Pattern: ^\d{1-5}:[0-5][0-9]$
	NightTime *string `json:"NightTime"`

	// off block time
	// Required: true
	// Min Length: 1
	// Pattern: ^([0-1][0-9]|2[0-3]):[0-5][0-9]$
	OffBlockTime *string `json:"OffBlockTime"`

	// on block time
	// Required: true
	// Min Length: 1
	// Pattern: ^([0-1][0-9]|2[0-3]):[0-5][0-9]$
	OnBlockTime *string `json:"OnBlockTime"`

	// p i c name
	// Required: true
	// Min Length: 1
	PICName *string `json:"PICName"`

	// p i c time
	// Required: true
	// Min Length: 1
	// Pattern: ^\d{1-5}:[0-5][0-9]$
	PICTime *string `json:"PICTime"`

	// pilot function
	// Required: true
	PilotFunction *PilotFunctions `json:"PilotFunction"`

	// remark
	Remark string `json:"Remark,omitempty"`

	// single pilot multi engine time
	// Required: true
	// Min Length: 1
	// Pattern: ^\d{1-5}:[0-5][0-9]$
	SinglePilotMultiEngineTime *string `json:"SinglePilotMultiEngineTime"`

	// single pilot single engine time
	// Required: true
	// Min Length: 1
	// Pattern: ^\d{1-5}:[0-5][0-9]$
	SinglePilotSingleEngineTime *string `json:"SinglePilotSingleEngineTime"`

	// status
	// Required: true
	Status *UpdateStatus `json:"Status"`

	// takeoff time
	// Pattern: ^([0-1][0-9]|2[0-3]):[0-5][0-9]$
	TakeoffTime string `json:"TakeoffTime,omitempty"`

	// type of flight
	// Required: true
	TypeOfFlight *FlightTypes `json:"TypeOfFlight"`

	// v f r time
	// Required: true
	// Min Length: 1
	// Pattern: ^\d{1-5}:[0-5][0-9]$
	VFRTime *string `json:"VFRTime"`
}

// Validate validates this flight output base
func (m *FlightOutputBase) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAirborneTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAircraft(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAircraftCounterEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAircraftCounterStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAreTimesLocal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArrivalAirport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChangeIFRToVFRTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChangeVFRToIFRTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCopiTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDayLandings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDayNightSequence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDayTakeoffs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDayTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDepartureAirport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDualTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEveningTwilightTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlightTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIFRApproaches(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIFRDepartures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIFRTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstructorTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLandingTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarkers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMorningTwilightTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMultiPilotTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNightLandings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNightTakeoffs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNightTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOffBlockTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnBlockTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePICName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePICTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePilotFunction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSinglePilotMultiEngineTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSinglePilotSingleEngineTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTakeoffTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeOfFlight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVFRTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FlightOutputBase) validateAirborneTime(formats strfmt.Registry) error {

	if err := validate.Required("AirborneTime", "body", m.AirborneTime); err != nil {
		return err
	}

	if err := validate.MinLength("AirborneTime", "body", *m.AirborneTime, 1); err != nil {
		return err
	}

	if err := validate.Pattern("AirborneTime", "body", *m.AirborneTime, `^\d{1-5}:[0-5][0-9]$`); err != nil {
		return err
	}

	return nil
}

func (m *FlightOutputBase) validateAircraft(formats strfmt.Registry) error {
	if swag.IsZero(m.Aircraft) { // not required
		return nil
	}

	if m.Aircraft != nil {
		if err := m.Aircraft.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Aircraft")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Aircraft")
			}
			return err
		}
	}

	return nil
}

func (m *FlightOutputBase) validateAircraftCounterEnd(formats strfmt.Registry) error {
	if swag.IsZero(m.AircraftCounterEnd) { // not required
		return nil
	}

	if err := validate.Pattern("AircraftCounterEnd", "body", m.AircraftCounterEnd, `^\d{1-5}:[0-5][0-9]$`); err != nil {
		return err
	}

	return nil
}

func (m *FlightOutputBase) validateAircraftCounterStart(formats strfmt.Registry) error {
	if swag.IsZero(m.AircraftCounterStart) { // not required
		return nil
	}

	if err := validate.Pattern("AircraftCounterStart", "body", m.AircraftCounterStart, `^\d{1-5}:[0-5][0-9]$`); err != nil {
		return err
	}

	return nil
}

func (m *FlightOutputBase) validateAreTimesLocal(formats strfmt.Registry) error {

	if err := validate.Required("AreTimesLocal", "body", bool(m.AreTimesLocal)); err != nil {
		return err
	}

	return nil
}

func (m *FlightOutputBase) validateArrivalAirport(formats strfmt.Registry) error {

	if err := validate.Required("ArrivalAirport", "body", m.ArrivalAirport); err != nil {
		return err
	}

	if m.ArrivalAirport != nil {
		if err := m.ArrivalAirport.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ArrivalAirport")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ArrivalAirport")
			}
			return err
		}
	}

	return nil
}

func (m *FlightOutputBase) validateChangeIFRToVFRTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ChangeIFRToVFRTime) { // not required
		return nil
	}

	if err := validate.Pattern("ChangeIFRToVFRTime", "body", m.ChangeIFRToVFRTime, `^([0-1][0-9]|2[0-3]):[0-5][0-9]$`); err != nil {
		return err
	}

	return nil
}

func (m *FlightOutputBase) validateChangeVFRToIFRTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ChangeVFRToIFRTime) { // not required
		return nil
	}

	if err := validate.Pattern("ChangeVFRToIFRTime", "body", m.ChangeVFRToIFRTime, `^([0-1][0-9]|2[0-3]):[0-5][0-9]$`); err != nil {
		return err
	}

	return nil
}

func (m *FlightOutputBase) validateCopiTime(formats strfmt.Registry) error {

	if err := validate.Required("CopiTime", "body", m.CopiTime); err != nil {
		return err
	}

	if err := validate.MinLength("CopiTime", "body", *m.CopiTime, 1); err != nil {
		return err
	}

	if err := validate.Pattern("CopiTime", "body", *m.CopiTime, `^\d{1-5}:[0-5][0-9]$`); err != nil {
		return err
	}

	return nil
}

func (m *FlightOutputBase) validateDate(formats strfmt.Registry) error {

	if err := validate.Required("Date", "body", m.Date); err != nil {
		return err
	}

	if err := validate.MinLength("Date", "body", *m.Date, 1); err != nil {
		return err
	}

	if err := validate.Pattern("Date", "body", *m.Date, `^\d{4}\-(0[1-9]|1[0-2])\-(0[1-9]|[1-2][0-9]|3[0-1])$`); err != nil {
		return err
	}

	return nil
}

func (m *FlightOutputBase) validateDayLandings(formats strfmt.Registry) error {

	if err := validate.Required("DayLandings", "body", m.DayLandings); err != nil {
		return err
	}

	if err := validate.MinimumInt("DayLandings", "body", int64(*m.DayLandings), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("DayLandings", "body", int64(*m.DayLandings), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *FlightOutputBase) validateDayNightSequence(formats strfmt.Registry) error {

	if err := validate.Required("DayNightSequence", "body", m.DayNightSequence); err != nil {
		return err
	}

	if err := validate.Required("DayNightSequence", "body", m.DayNightSequence); err != nil {
		return err
	}

	if m.DayNightSequence != nil {
		if err := m.DayNightSequence.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DayNightSequence")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DayNightSequence")
			}
			return err
		}
	}

	return nil
}

func (m *FlightOutputBase) validateDayTakeoffs(formats strfmt.Registry) error {

	if err := validate.Required("DayTakeoffs", "body", m.DayTakeoffs); err != nil {
		return err
	}

	if err := validate.MinimumInt("DayTakeoffs", "body", int64(*m.DayTakeoffs), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("DayTakeoffs", "body", int64(*m.DayTakeoffs), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *FlightOutputBase) validateDayTime(formats strfmt.Registry) error {

	if err := validate.Required("DayTime", "body", m.DayTime); err != nil {
		return err
	}

	if err := validate.MinLength("DayTime", "body", *m.DayTime, 1); err != nil {
		return err
	}

	if err := validate.Pattern("DayTime", "body", *m.DayTime, `^\d{1-5}:[0-5][0-9]$`); err != nil {
		return err
	}

	return nil
}

func (m *FlightOutputBase) validateDepartureAirport(formats strfmt.Registry) error {

	if err := validate.Required("DepartureAirport", "body", m.DepartureAirport); err != nil {
		return err
	}

	if m.DepartureAirport != nil {
		if err := m.DepartureAirport.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DepartureAirport")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DepartureAirport")
			}
			return err
		}
	}

	return nil
}

func (m *FlightOutputBase) validateDualTime(formats strfmt.Registry) error {

	if err := validate.Required("DualTime", "body", m.DualTime); err != nil {
		return err
	}

	if err := validate.MinLength("DualTime", "body", *m.DualTime, 1); err != nil {
		return err
	}

	if err := validate.Pattern("DualTime", "body", *m.DualTime, `^\d{1-5}:[0-5][0-9]$`); err != nil {
		return err
	}

	return nil
}

func (m *FlightOutputBase) validateEveningTwilightTime(formats strfmt.Registry) error {
	if swag.IsZero(m.EveningTwilightTime) { // not required
		return nil
	}

	if err := validate.Pattern("EveningTwilightTime", "body", m.EveningTwilightTime, `^([0-1][0-9]|2[0-3]):[0-5][0-9]$`); err != nil {
		return err
	}

	return nil
}

func (m *FlightOutputBase) validateFlightTime(formats strfmt.Registry) error {

	if err := validate.Required("FlightTime", "body", m.FlightTime); err != nil {
		return err
	}

	if err := validate.MinLength("FlightTime", "body", *m.FlightTime, 1); err != nil {
		return err
	}

	if err := validate.Pattern("FlightTime", "body", *m.FlightTime, `^\d{1-5}:[0-5][0-9]$`); err != nil {
		return err
	}

	return nil
}

func (m *FlightOutputBase) validateIFRApproaches(formats strfmt.Registry) error {

	if err := validate.Required("IFRApproaches", "body", m.IFRApproaches); err != nil {
		return err
	}

	if err := validate.MinimumInt("IFRApproaches", "body", int64(*m.IFRApproaches), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("IFRApproaches", "body", int64(*m.IFRApproaches), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *FlightOutputBase) validateIFRDepartures(formats strfmt.Registry) error {

	if err := validate.Required("IFRDepartures", "body", m.IFRDepartures); err != nil {
		return err
	}

	if err := validate.MinimumInt("IFRDepartures", "body", int64(*m.IFRDepartures), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("IFRDepartures", "body", int64(*m.IFRDepartures), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *FlightOutputBase) validateIFRTime(formats strfmt.Registry) error {

	if err := validate.Required("IFRTime", "body", m.IFRTime); err != nil {
		return err
	}

	if err := validate.MinLength("IFRTime", "body", *m.IFRTime, 1); err != nil {
		return err
	}

	if err := validate.Pattern("IFRTime", "body", *m.IFRTime, `^\d{1-5}:[0-5][0-9]$`); err != nil {
		return err
	}

	return nil
}

func (m *FlightOutputBase) validateInstructorTime(formats strfmt.Registry) error {

	if err := validate.Required("InstructorTime", "body", m.InstructorTime); err != nil {
		return err
	}

	if err := validate.MinLength("InstructorTime", "body", *m.InstructorTime, 1); err != nil {
		return err
	}

	if err := validate.Pattern("InstructorTime", "body", *m.InstructorTime, `^\d{1-5}:[0-5][0-9]$`); err != nil {
		return err
	}

	return nil
}

func (m *FlightOutputBase) validateLandingTime(formats strfmt.Registry) error {
	if swag.IsZero(m.LandingTime) { // not required
		return nil
	}

	if err := validate.Pattern("LandingTime", "body", m.LandingTime, `^([0-1][0-9]|2[0-3]):[0-5][0-9]$`); err != nil {
		return err
	}

	return nil
}

func (m *FlightOutputBase) validateMarkers(formats strfmt.Registry) error {
	if swag.IsZero(m.Markers) { // not required
		return nil
	}

	for i := 0; i < len(m.Markers); i++ {
		if swag.IsZero(m.Markers[i]) { // not required
			continue
		}

		if m.Markers[i] != nil {
			if err := m.Markers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Markers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Markers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FlightOutputBase) validateMorningTwilightTime(formats strfmt.Registry) error {
	if swag.IsZero(m.MorningTwilightTime) { // not required
		return nil
	}

	if err := validate.Pattern("MorningTwilightTime", "body", m.MorningTwilightTime, `^([0-1][0-9]|2[0-3]):[0-5][0-9]$`); err != nil {
		return err
	}

	return nil
}

func (m *FlightOutputBase) validateMultiPilotTime(formats strfmt.Registry) error {

	if err := validate.Required("MultiPilotTime", "body", m.MultiPilotTime); err != nil {
		return err
	}

	if err := validate.MinLength("MultiPilotTime", "body", *m.MultiPilotTime, 1); err != nil {
		return err
	}

	if err := validate.Pattern("MultiPilotTime", "body", *m.MultiPilotTime, `^\d{1-5}:[0-5][0-9]$`); err != nil {
		return err
	}

	return nil
}

func (m *FlightOutputBase) validateNightLandings(formats strfmt.Registry) error {

	if err := validate.Required("NightLandings", "body", m.NightLandings); err != nil {
		return err
	}

	if err := validate.MinimumInt("NightLandings", "body", int64(*m.NightLandings), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("NightLandings", "body", int64(*m.NightLandings), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *FlightOutputBase) validateNightTakeoffs(formats strfmt.Registry) error {

	if err := validate.Required("NightTakeoffs", "body", m.NightTakeoffs); err != nil {
		return err
	}

	if err := validate.MinimumInt("NightTakeoffs", "body", int64(*m.NightTakeoffs), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("NightTakeoffs", "body", int64(*m.NightTakeoffs), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *FlightOutputBase) validateNightTime(formats strfmt.Registry) error {

	if err := validate.Required("NightTime", "body", m.NightTime); err != nil {
		return err
	}

	if err := validate.MinLength("NightTime", "body", *m.NightTime, 1); err != nil {
		return err
	}

	if err := validate.Pattern("NightTime", "body", *m.NightTime, `^\d{1-5}:[0-5][0-9]$`); err != nil {
		return err
	}

	return nil
}

func (m *FlightOutputBase) validateOffBlockTime(formats strfmt.Registry) error {

	if err := validate.Required("OffBlockTime", "body", m.OffBlockTime); err != nil {
		return err
	}

	if err := validate.MinLength("OffBlockTime", "body", *m.OffBlockTime, 1); err != nil {
		return err
	}

	if err := validate.Pattern("OffBlockTime", "body", *m.OffBlockTime, `^([0-1][0-9]|2[0-3]):[0-5][0-9]$`); err != nil {
		return err
	}

	return nil
}

func (m *FlightOutputBase) validateOnBlockTime(formats strfmt.Registry) error {

	if err := validate.Required("OnBlockTime", "body", m.OnBlockTime); err != nil {
		return err
	}

	if err := validate.MinLength("OnBlockTime", "body", *m.OnBlockTime, 1); err != nil {
		return err
	}

	if err := validate.Pattern("OnBlockTime", "body", *m.OnBlockTime, `^([0-1][0-9]|2[0-3]):[0-5][0-9]$`); err != nil {
		return err
	}

	return nil
}

func (m *FlightOutputBase) validatePICName(formats strfmt.Registry) error {

	if err := validate.Required("PICName", "body", m.PICName); err != nil {
		return err
	}

	if err := validate.MinLength("PICName", "body", *m.PICName, 1); err != nil {
		return err
	}

	return nil
}

func (m *FlightOutputBase) validatePICTime(formats strfmt.Registry) error {

	if err := validate.Required("PICTime", "body", m.PICTime); err != nil {
		return err
	}

	if err := validate.MinLength("PICTime", "body", *m.PICTime, 1); err != nil {
		return err
	}

	if err := validate.Pattern("PICTime", "body", *m.PICTime, `^\d{1-5}:[0-5][0-9]$`); err != nil {
		return err
	}

	return nil
}

func (m *FlightOutputBase) validatePilotFunction(formats strfmt.Registry) error {

	if err := validate.Required("PilotFunction", "body", m.PilotFunction); err != nil {
		return err
	}

	if err := validate.Required("PilotFunction", "body", m.PilotFunction); err != nil {
		return err
	}

	if m.PilotFunction != nil {
		if err := m.PilotFunction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PilotFunction")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PilotFunction")
			}
			return err
		}
	}

	return nil
}

func (m *FlightOutputBase) validateSinglePilotMultiEngineTime(formats strfmt.Registry) error {

	if err := validate.Required("SinglePilotMultiEngineTime", "body", m.SinglePilotMultiEngineTime); err != nil {
		return err
	}

	if err := validate.MinLength("SinglePilotMultiEngineTime", "body", *m.SinglePilotMultiEngineTime, 1); err != nil {
		return err
	}

	if err := validate.Pattern("SinglePilotMultiEngineTime", "body", *m.SinglePilotMultiEngineTime, `^\d{1-5}:[0-5][0-9]$`); err != nil {
		return err
	}

	return nil
}

func (m *FlightOutputBase) validateSinglePilotSingleEngineTime(formats strfmt.Registry) error {

	if err := validate.Required("SinglePilotSingleEngineTime", "body", m.SinglePilotSingleEngineTime); err != nil {
		return err
	}

	if err := validate.MinLength("SinglePilotSingleEngineTime", "body", *m.SinglePilotSingleEngineTime, 1); err != nil {
		return err
	}

	if err := validate.Pattern("SinglePilotSingleEngineTime", "body", *m.SinglePilotSingleEngineTime, `^\d{1-5}:[0-5][0-9]$`); err != nil {
		return err
	}

	return nil
}

func (m *FlightOutputBase) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("Status", "body", m.Status); err != nil {
		return err
	}

	if err := validate.Required("Status", "body", m.Status); err != nil {
		return err
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Status")
			}
			return err
		}
	}

	return nil
}

func (m *FlightOutputBase) validateTakeoffTime(formats strfmt.Registry) error {
	if swag.IsZero(m.TakeoffTime) { // not required
		return nil
	}

	if err := validate.Pattern("TakeoffTime", "body", m.TakeoffTime, `^([0-1][0-9]|2[0-3]):[0-5][0-9]$`); err != nil {
		return err
	}

	return nil
}

func (m *FlightOutputBase) validateTypeOfFlight(formats strfmt.Registry) error {

	if err := validate.Required("TypeOfFlight", "body", m.TypeOfFlight); err != nil {
		return err
	}

	if err := validate.Required("TypeOfFlight", "body", m.TypeOfFlight); err != nil {
		return err
	}

	if m.TypeOfFlight != nil {
		if err := m.TypeOfFlight.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TypeOfFlight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TypeOfFlight")
			}
			return err
		}
	}

	return nil
}

func (m *FlightOutputBase) validateVFRTime(formats strfmt.Registry) error {

	if err := validate.Required("VFRTime", "body", m.VFRTime); err != nil {
		return err
	}

	if err := validate.MinLength("VFRTime", "body", *m.VFRTime, 1); err != nil {
		return err
	}

	if err := validate.Pattern("VFRTime", "body", *m.VFRTime, `^\d{1-5}:[0-5][0-9]$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this flight output base based on the context it is used
func (m *FlightOutputBase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAircraft(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateArrivalAirport(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDayNightSequence(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDepartureAirport(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMarkers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePilotFunction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeOfFlight(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FlightOutputBase) contextValidateAircraft(ctx context.Context, formats strfmt.Registry) error {

	if m.Aircraft != nil {

		if swag.IsZero(m.Aircraft) { // not required
			return nil
		}

		if err := m.Aircraft.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Aircraft")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Aircraft")
			}
			return err
		}
	}

	return nil
}

func (m *FlightOutputBase) contextValidateArrivalAirport(ctx context.Context, formats strfmt.Registry) error {

	if m.ArrivalAirport != nil {

		if err := m.ArrivalAirport.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ArrivalAirport")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ArrivalAirport")
			}
			return err
		}
	}

	return nil
}

func (m *FlightOutputBase) contextValidateDayNightSequence(ctx context.Context, formats strfmt.Registry) error {

	if m.DayNightSequence != nil {

		if err := m.DayNightSequence.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DayNightSequence")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DayNightSequence")
			}
			return err
		}
	}

	return nil
}

func (m *FlightOutputBase) contextValidateDepartureAirport(ctx context.Context, formats strfmt.Registry) error {

	if m.DepartureAirport != nil {

		if err := m.DepartureAirport.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DepartureAirport")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DepartureAirport")
			}
			return err
		}
	}

	return nil
}

func (m *FlightOutputBase) contextValidateMarkers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Markers); i++ {

		if m.Markers[i] != nil {

			if swag.IsZero(m.Markers[i]) { // not required
				return nil
			}

			if err := m.Markers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Markers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Markers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FlightOutputBase) contextValidatePilotFunction(ctx context.Context, formats strfmt.Registry) error {

	if m.PilotFunction != nil {

		if err := m.PilotFunction.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PilotFunction")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PilotFunction")
			}
			return err
		}
	}

	return nil
}

func (m *FlightOutputBase) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {

		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Status")
			}
			return err
		}
	}

	return nil
}

func (m *FlightOutputBase) contextValidateTypeOfFlight(ctx context.Context, formats strfmt.Registry) error {

	if m.TypeOfFlight != nil {

		if err := m.TypeOfFlight.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TypeOfFlight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TypeOfFlight")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FlightOutputBase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FlightOutputBase) UnmarshalBinary(b []byte) error {
	var res FlightOutputBase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
