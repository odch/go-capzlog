// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SailplaneOutput sailplane output
//
// swagger:model SailplaneOutput
type SailplaneOutput struct {

	// i c a o designator
	// Required: true
	// Min Length: 1
	ICAODesignator *string `json:"ICAODesignator"`

	// is powered sailplane
	// Required: true
	IsPoweredSailplane *bool `json:"IsPoweredSailplane"`

	// registration
	// Required: true
	// Min Length: 1
	Registration *string `json:"Registration"`

	// The variant of the aircraft, in case several variants are available for the provided registration in capzlog.aero. If no variant is specified and there are multiple variants for the provided registration in capzlog.aero, one is selected randomly
	Variant string `json:"Variant,omitempty"`
}

// Validate validates this sailplane output
func (m *SailplaneOutput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateICAODesignator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsPoweredSailplane(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistration(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SailplaneOutput) validateICAODesignator(formats strfmt.Registry) error {

	if err := validate.Required("ICAODesignator", "body", m.ICAODesignator); err != nil {
		return err
	}

	if err := validate.MinLength("ICAODesignator", "body", *m.ICAODesignator, 1); err != nil {
		return err
	}

	return nil
}

func (m *SailplaneOutput) validateIsPoweredSailplane(formats strfmt.Registry) error {

	if err := validate.Required("IsPoweredSailplane", "body", m.IsPoweredSailplane); err != nil {
		return err
	}

	return nil
}

func (m *SailplaneOutput) validateRegistration(formats strfmt.Registry) error {

	if err := validate.Required("Registration", "body", m.Registration); err != nil {
		return err
	}

	if err := validate.MinLength("Registration", "body", *m.Registration, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this sailplane output based on context it is used
func (m *SailplaneOutput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SailplaneOutput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SailplaneOutput) UnmarshalBinary(b []byte) error {
	var res SailplaneOutput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
