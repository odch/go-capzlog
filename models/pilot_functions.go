// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PilotFunctions pilot functions
//
// swagger:model PilotFunctions
type PilotFunctions string

func NewPilotFunctions(value PilotFunctions) *PilotFunctions {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PilotFunctions.
func (m PilotFunctions) Pointer() *PilotFunctions {
	return &m
}

const (

	// PilotFunctionsPIC captures enum value "PIC"
	PilotFunctionsPIC PilotFunctions = "PIC"

	// PilotFunctionsCopi captures enum value "Copi"
	PilotFunctionsCopi PilotFunctions = "Copi"

	// PilotFunctionsDual captures enum value "Dual"
	PilotFunctionsDual PilotFunctions = "Dual"

	// PilotFunctionsPICUS captures enum value "PICUS"
	PilotFunctionsPICUS PilotFunctions = "PICUS"

	// PilotFunctionsSPIC captures enum value "SPIC"
	PilotFunctionsSPIC PilotFunctions = "SPIC"

	// PilotFunctionsTrainee captures enum value "Trainee"
	PilotFunctionsTrainee PilotFunctions = "Trainee"

	// PilotFunctionsSyntheticFlightInstructor captures enum value "SyntheticFlightInstructor"
	PilotFunctionsSyntheticFlightInstructor PilotFunctions = "SyntheticFlightInstructor"

	// PilotFunctionsInstructorOnPilotSeat captures enum value "InstructorOnPilotSeat"
	PilotFunctionsInstructorOnPilotSeat PilotFunctions = "InstructorOnPilotSeat"

	// PilotFunctionsInstructorOnJumpSeat captures enum value "InstructorOnJumpSeat"
	PilotFunctionsInstructorOnJumpSeat PilotFunctions = "InstructorOnJumpSeat"

	// PilotFunctionsSupervisingInstructor captures enum value "SupervisingInstructor"
	PilotFunctionsSupervisingInstructor PilotFunctions = "SupervisingInstructor"

	// PilotFunctionsCompanion captures enum value "Companion"
	PilotFunctionsCompanion PilotFunctions = "Companion"

	// PilotFunctionsJumpSeat captures enum value "JumpSeat"
	PilotFunctionsJumpSeat PilotFunctions = "JumpSeat"

	// PilotFunctionsOther captures enum value "Other"
	PilotFunctionsOther PilotFunctions = "Other"
)

// for schema
var pilotFunctionsEnum []interface{}

func init() {
	var res []PilotFunctions
	if err := json.Unmarshal([]byte(`["PIC","Copi","Dual","PICUS","SPIC","Trainee","SyntheticFlightInstructor","InstructorOnPilotSeat","InstructorOnJumpSeat","SupervisingInstructor","Companion","JumpSeat","Other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pilotFunctionsEnum = append(pilotFunctionsEnum, v)
	}
}

func (m PilotFunctions) validatePilotFunctionsEnum(path, location string, value PilotFunctions) error {
	if err := validate.EnumCase(path, location, value, pilotFunctionsEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this pilot functions
func (m PilotFunctions) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePilotFunctionsEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this pilot functions based on context it is used
func (m PilotFunctions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
