// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// FlightTypes flight types
//
// swagger:model FlightTypes
type FlightTypes string

func NewFlightTypes(value FlightTypes) *FlightTypes {
	return &value
}

// Pointer returns a pointer to a freshly-allocated FlightTypes.
func (m FlightTypes) Pointer() *FlightTypes {
	return &m
}

const (

	// FlightTypesVFR captures enum value "VFR"
	FlightTypesVFR FlightTypes = "VFR"

	// FlightTypesIFR captures enum value "IFR"
	FlightTypesIFR FlightTypes = "IFR"

	// FlightTypesY captures enum value "Y"
	FlightTypesY FlightTypes = "Y"

	// FlightTypesZ captures enum value "Z"
	FlightTypesZ FlightTypes = "Z"

	// FlightTypesVFRIFRVFR captures enum value "VFR_IFR_VFR"
	FlightTypesVFRIFRVFR FlightTypes = "VFR_IFR_VFR"

	// FlightTypesIFRVFRIFR captures enum value "IFR_VFR_IFR"
	FlightTypesIFRVFRIFR FlightTypes = "IFR_VFR_IFR"
)

// for schema
var flightTypesEnum []interface{}

func init() {
	var res []FlightTypes
	if err := json.Unmarshal([]byte(`["VFR","IFR","Y","Z","VFR_IFR_VFR","IFR_VFR_IFR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		flightTypesEnum = append(flightTypesEnum, v)
	}
}

func (m FlightTypes) validateFlightTypesEnum(path, location string, value FlightTypes) error {
	if err := validate.EnumCase(path, location, value, flightTypesEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this flight types
func (m FlightTypes) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateFlightTypesEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this flight types based on context it is used
func (m FlightTypes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
