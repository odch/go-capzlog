// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BalloonOutput balloon output
//
// swagger:model BalloonOutput
type BalloonOutput struct {

	// balloon group
	BalloonGroup BalloonGroups `json:"BalloonGroup,omitempty"`

	// i c a o designator
	// Required: true
	// Min Length: 1
	ICAODesignator *string `json:"ICAODesignator"`

	// registration
	// Required: true
	// Min Length: 1
	Registration *string `json:"Registration"`

	// The variant of the aircraft, in case several variants are available for the provided registration in capzlog.aero. If no variant is specified and there are multiple variants for the provided registration in capzlog.aero, one is selected randomly
	Variant string `json:"Variant,omitempty"`
}

// Validate validates this balloon output
func (m *BalloonOutput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBalloonGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateICAODesignator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistration(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BalloonOutput) validateBalloonGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.BalloonGroup) { // not required
		return nil
	}

	if err := m.BalloonGroup.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("BalloonGroup")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("BalloonGroup")
		}
		return err
	}

	return nil
}

func (m *BalloonOutput) validateICAODesignator(formats strfmt.Registry) error {

	if err := validate.Required("ICAODesignator", "body", m.ICAODesignator); err != nil {
		return err
	}

	if err := validate.MinLength("ICAODesignator", "body", *m.ICAODesignator, 1); err != nil {
		return err
	}

	return nil
}

func (m *BalloonOutput) validateRegistration(formats strfmt.Registry) error {

	if err := validate.Required("Registration", "body", m.Registration); err != nil {
		return err
	}

	if err := validate.MinLength("Registration", "body", *m.Registration, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this balloon output based on the context it is used
func (m *BalloonOutput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBalloonGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BalloonOutput) contextValidateBalloonGroup(ctx context.Context, formats strfmt.Registry) error {

	if err := m.BalloonGroup.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("BalloonGroup")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("BalloonGroup")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BalloonOutput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BalloonOutput) UnmarshalBinary(b []byte) error {
	var res BalloonOutput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
