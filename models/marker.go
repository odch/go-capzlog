// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Marker marker
//
// swagger:model Marker
type Marker struct {

	// type
	// Required: true
	Type *MarkerType `json:"Type"`

	// The content of this field depends on the marker type as follows:<ul><li><b>Custom:</b> this marker type is currently not supported</li><li><b>SkillTest:</b> one of the values ClassOrTypeRating, AircraftType, InstrumentRating, Other</li><li><b>ProficiencyCheck:</b> one of the values ClassOrTypeRating, AircraftType, InstrumentRating, Other</li><li><b>AssessmentOfCompetence:</b> null/nil (no value allowed)</li><li><b>OperatorProficiencyCheck:</b> one of the values ClassOrTypeRating, AircraftType, InstrumentRating, Other</li><li><b>OperatorLineCheck:</b> null/nil (no value allowed)</li><li><b>ExaminerFlight:</b> one of the values ClassOrTypeRating, AircraftType, InstrumentRating, Other</li><li><b>LanguageProficiencyCheck:</b> one of the values English, German, French, Italian, Russian, Other</li><li><b>RefresherTraining:</b> one of the values ClassOrTypeRating, AircraftType, InstrumentRating, Other</li><li><b>DemonstrationFlight:</b> null/nil (no value allowed)</li><li><b>TrainingFlight:</b> one of the values ClassOrTypeRating, AircraftType, InstrumentRating, Other</li><li><b>FamiliarizationFlight:</b> one of the values ClassOrTypeRating, AircraftType, Other</li><li><b>DifferenceTraining:</b> one of the values ClassOrTypeRating, AircraftType, Other</li><li><b>LineFlyingUnderSupervision:</b> null/nil (no value allowed)</li><li><b>LandingTraining:</b> null/nil (no value allowed)</li><li><b>ZeroFlightTimeTraining:</b> null/nil (no value allowed)</li><li><b>LaunchPrivilege:</b> one of the values Aerotow, Bungee, Car, Self, Winch</li><li><b>AerobaticPrivilege:</b> one of the values Basic, Advanced</li><li><b>CloudFlyingPrivilege:</b> null/nil (no value allowed)</li><li><b>CourseCompleted:</b> text matching the regular expression '^.+$'</li><li><b>AdditionalRatingTrainingCourse:</b> text matching the regular expression '^.+$'</li><li><b>InstructorTrainingCourse:</b> text matching the regular expression '^.+$'</li><li><b>DemonstrationTheAbilityToInstruct:</b> text matching the regular expression '^.+$'</li><li><b>WithStudent:</b> text matching the regular expression '^(?:.|\n)+$'</li><li><b>WithInstructor:</b> text matching the regular expression '^(?:.|\n)+$'</li><li><b>WithExaminer:</b> text matching the regular expression '^(?:.|\n)+$'</li><li><b>Lesson:</b> text matching the regular expression '^(?:.|\n)+$'</li><li><b>EitherSeatQualification:</b> null/nil (no value allowed)</li><li><b>RecurrentMountainPaxCheckHelicopter:</b> null/nil (no value allowed)</li><li><b>LOFT:</b> null/nil (no value allowed)</li><li><b>OperatorProficiencyTraining:</b> null/nil (no value allowed)</li><li><b>TrainingPhase:</b> one of the values PPL, NIT, CPL_SEP, EXPB, UPRT, CPL_MEP, MEP_IR, MCC</li><li><b>Solo:</b> null/nil (no value allowed)</li><li><b>CrossCountry:</b> null/nil (no value allowed)</li><li><b>SeaTakeoff:</b> a positive number representing the takeoffs for the marker. The value must be less than or equal to the total number of takeoffs</li><li><b>SeaLanding:</b> a positive number representing the landings for the marker. The value must be less than or equal to the total number of landings</li><li><b>SeriesOfFlights:</b> a duration of time in format hh:mm (<i>":" is required</i>) or a positive number representing the reduced flight time in <i>minutes</i>. The value must be less than the time calculated based on the departure/off block and arrival/on block times</li><li><b>ReducedTimeOnControls:</b> a duration of time in format hh:mm (<i>":" is required</i>) or a positive number representing the reduced flight time in <i>minutes</i>. The value must be less than the time calculated based on the departure/off block and arrival/on block times</li><li><b>SailplaneTowing:</b> null/nil (no value allowed)</li><li><b>BannerTowing:</b> null/nil (no value allowed)</li><li><b>Aerobatic:</b> null/nil (no value allowed)</li><li><b>SelfSustainable:</b> null/nil (no value allowed)</li><li><b>CloudFlying:</b> null/nil (no value allowed)</li><li><b>TetheredFlight:</b> null/nil (no value allowed)</li><li><b>NightVisionImagingSystem:</b> null/nil (no value allowed)</li><li><b>FlightTest:</b> one of the values Cat1, Cat2</li><li><b>Paradropping:</b> null/nil (no value allowed)</li><li><b>LowVisibilityTakeoff:</b> null/nil (no value allowed)</li><li><b>ApproachType:</b> one of the values Visual, Circling, ILS_CAT_I, ILS_CAT_II, ILS_CAT_IIIA, ILS_CAT_IIIB, ILS_CAT_IIIC, LOC, LOC_DME, VOR, VOR_DME, NDB, RNP, RNP_AR, LPV, LP, LNAV_VNAV, LNAV, GLS</li><li><b>LowVisibilityLandingAirplane:</b> one of the values CAT_I_Autoland, CAT_I_SimulatedAutoland, CAT_II_ManualLand, CAT_II_Autoland, CAT_II_Simulated, CAT_II_SimulatedAutoland, CAT_IIIA_Simulated, CAT_IIIA_Autoland, CAT_IIIA_SimulatedAutoland, CAT_IIIB_Autoland, CAT_IIIB_Simulated, CAT_IIIB_SimulatedAutoland, CAT_IIIC_Autoland, CAT_IIIC_Simulated, CAT_IIIC_SimulatedAutoland</li><li><b>HelicopterDepartureInFog:</b> null/nil (no value allowed)</li><li><b>MountainTakeoff:</b> one of the values Skis, Wheels</li><li><b>MountainTakeoffHelicopter:</b> a positive number representing the takeoffs for the marker. The value must be less than or equal to the total number of takeoffs</li><li><b>MountainLanding:</b> one of the values Skis, Wheels</li><li><b>MountainLandingHelicopter:</b> a positive number representing the landings for the marker. The value must be less than or equal to the total number of landings</li><li><b>MountainLandingOfficialSiteHelicopter:</b> a positive number representing the landings for the marker. The value must be less than or equal to the total number of landings</li><li><b>MountainLandingAbove2000mHelicopter:</b> a positive number representing the landings for the marker. The value must be less than or equal to the total number of landings</li><li><b>MountainLandingAbove2700mHelicopter:</b> a positive number representing the landings for the marker. The value must be less than or equal to the total number of landings</li><li><b>TakeoffRunway:</b> text matching the regular expression '^(?:0[1-9]|[1-2][0-9]|3[0-6])[LRC]?$'</li><li><b>LandingRunway:</b> text matching the regular expression '^(?:0[1-9]|[1-2][0-9]|3[0-6])[LRC]?$'</li><li><b>HoldingPattern:</b> a positive number</li><li><b>GoAround:</b> a positive number</li><li><b>RunwaySwingOver:</b> null/nil (no value allowed)</li><li><b>SteepApproach:</b> null/nil (no value allowed)</li><li><b>GlacierLanding:</b> a positive number representing the landings for the marker. The value must be less than or equal to the total number of landings</li><li><b>TouchAndGo:</b> a positive number representing the landings for the marker. The value must be less than or equal to the total number of landings</li><li><b>EVS:</b> null/nil (no value allowed)</li><li><b>HESLO1:</b> a positive number</li><li><b>HESLO2:</b> a positive number</li><li><b>HESLO3:</b> a positive number</li><li><b>HESLO4:</b> a positive number</li><li><b>HEC1:</b> a positive number</li><li><b>HEC2:</b> a positive number</li><li><b>HHO:</b> a positive number</li><li><b>ReliefPilot:</b> a duration of time in format hh:mm (<i>":" is required</i>) or a positive number representing the reduced flight time in <i>minutes</i>. The value must be less than the time calculated based on the departure/off block and arrival/on block times</li><li><b>Examiner:</b> null/nil (no value allowed)</li><li><b>LanguageAssessor:</b> null/nil (no value allowed)</li><li><b>PilotRole:</b> one of the values PilotFlying, PilotMonitoring</li><li><b>WithMate:</b> text matching the regular expression '^.+$'</li><li><b>WithPassengers:</b> text matching the regular expression '^(?:.|\n)+$'</li><li><b>NumberOfPassengers:</b> a positive number</li><li><b>CargoWeight:</b> a positive number</li><li><b>FlightNumber:</b> text matching the regular expression '^.+$'</li><li><b>Crew:</b> text matching the regular expression '^(?:.|\n)+$'</li><li><b>BirdStrike:</b> null/nil (no value allowed)</li></ul>
	Value string `json:"Value,omitempty"`
}

// Validate validates this marker
func (m *Marker) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Marker) validateType(formats strfmt.Registry) error {

	if err := validate.Required("Type", "body", m.Type); err != nil {
		return err
	}

	if err := validate.Required("Type", "body", m.Type); err != nil {
		return err
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this marker based on the context it is used
func (m *Marker) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Marker) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Marker) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Marker) UnmarshalBinary(b []byte) error {
	var res Marker
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
