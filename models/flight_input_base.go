// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FlightInputBase Represents a flight to be created in capzlog.aero
//
// swagger:model FlightInputBase
type FlightInputBase struct {

	// aircraft
	Aircraft *AircraftInput `json:"Aircraft,omitempty"`

	// The end value of the aircraft counter. If provided, AircraftCounterStart must also be provided. The time between AircraftCounterStart and AircraftCounterEnd must be less than the flight time and equal to the airborne time if it is provided
	// Pattern: ^\d{1-5}:[0-5][0-9]$
	AircraftCounterEnd string `json:"AircraftCounterEnd,omitempty"`

	// The start value of the aircraft counter. If provided, AircraftCounterEnd must also be provided. The time between AircraftCounterStart and AircraftCounterEnd must be less than the flight time and equal to the airborne time if it is provided
	// Pattern: ^\d{1-5}:[0-5][0-9]$
	AircraftCounterStart string `json:"AircraftCounterStart,omitempty"`

	// are times local
	// Required: true
	AreTimesLocal bool `json:"AreTimesLocal"`

	// arrival airport
	// Required: true
	ArrivalAirport *AirportInput `json:"ArrivalAirport"`

	// If set to true, the day/night limits are calculated by capzlog.aero; no twilight values should be provided; works only with UTC times or in CET time zone. If set to false, the day/night limits should be provided as twilight values; if none are provided, the flight is considered day.
	// Required: true
	AutoCalculateDayNightTime bool `json:"AutoCalculateDayNightTime"`

	// change i f r to v f r time
	// Pattern: ^([0-1][0-9]|2[0-3]):[0-5][0-9]$
	ChangeIFRToVFRTime string `json:"ChangeIFRToVFRTime,omitempty"`

	// change v f r to i f r time
	// Pattern: ^([0-1][0-9]|2[0-3]):[0-5][0-9]$
	ChangeVFRToIFRTime string `json:"ChangeVFRToIFRTime,omitempty"`

	// date
	// Required: true
	// Min Length: 1
	// Pattern: ^\d{4}\-(0[1-9]|1[0-2])\-(0[1-9]|[1-2][0-9]|3[0-1])$
	Date *string `json:"Date"`

	// The day/night sequence of the flight. Required if AutoCalculateDayNightTime is false
	DayNightSequence struct {
		DayNightSequences
	} `json:"DayNightSequence,omitempty"`

	// departure airport
	// Required: true
	DepartureAirport *AirportInput `json:"DepartureAirport"`

	// evening twilight time
	// Pattern: ^([0-1][0-9]|2[0-3]):[0-5][0-9]$
	EveningTwilightTime string `json:"EveningTwilightTime,omitempty"`

	// i f r approaches
	// Required: true
	// Maximum: 100
	// Minimum: 0
	IFRApproaches *int32 `json:"IFRApproaches"`

	// i f r departures
	// Required: true
	// Maximum: 100
	// Minimum: 0
	IFRDepartures *int32 `json:"IFRDepartures"`

	// Used to specify if the flight is single pilot or multi pilot operation. Considered only for aircraft that can be flown both single and multi pilot
	IsMultiPilot bool `json:"IsMultiPilot,omitempty"`

	// landing time
	// Pattern: ^([0-1][0-9]|2[0-3]):[0-5][0-9]$
	LandingTime string `json:"LandingTime,omitempty"`

	// landings
	// Required: true
	// Maximum: 100
	// Minimum: 0
	Landings *int32 `json:"Landings"`

	// markers
	Markers []*Marker `json:"Markers"`

	// morning twilight time
	// Pattern: ^([0-1][0-9]|2[0-3]):[0-5][0-9]$
	MorningTwilightTime string `json:"MorningTwilightTime,omitempty"`

	// night landings
	// Required: true
	// Maximum: 100
	// Minimum: 0
	NightLandings *int32 `json:"NightLandings"`

	// night takeoffs
	// Required: true
	// Maximum: 100
	// Minimum: 0
	NightTakeoffs *int32 `json:"NightTakeoffs"`

	// off block time
	// Required: true
	// Min Length: 1
	// Pattern: ^([0-1][0-9]|2[0-3]):[0-5][0-9]$
	OffBlockTime *string `json:"OffBlockTime"`

	// on block time
	// Required: true
	// Min Length: 1
	// Pattern: ^([0-1][0-9]|2[0-3]):[0-5][0-9]$
	OnBlockTime *string `json:"OnBlockTime"`

	// p i c name
	// Required: true
	// Min Length: 1
	PICName *string `json:"PICName"`

	// pilot function
	// Required: true
	PilotFunction *PilotFunctions `json:"PilotFunction"`

	// remark
	Remark string `json:"Remark,omitempty"`

	// takeoff time
	// Pattern: ^([0-1][0-9]|2[0-3]):[0-5][0-9]$
	TakeoffTime string `json:"TakeoffTime,omitempty"`

	// takeoffs
	// Required: true
	// Maximum: 100
	// Minimum: 0
	Takeoffs *int32 `json:"Takeoffs"`

	// type of flight
	// Required: true
	TypeOfFlight *FlightTypes `json:"TypeOfFlight"`
}

// Validate validates this flight input base
func (m *FlightInputBase) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAircraft(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAircraftCounterEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAircraftCounterStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAreTimesLocal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArrivalAirport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAutoCalculateDayNightTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChangeIFRToVFRTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChangeVFRToIFRTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDayNightSequence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDepartureAirport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEveningTwilightTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIFRApproaches(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIFRDepartures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLandingTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLandings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarkers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMorningTwilightTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNightLandings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNightTakeoffs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOffBlockTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnBlockTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePICName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePilotFunction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTakeoffTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTakeoffs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeOfFlight(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FlightInputBase) validateAircraft(formats strfmt.Registry) error {
	if swag.IsZero(m.Aircraft) { // not required
		return nil
	}

	if m.Aircraft != nil {
		if err := m.Aircraft.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Aircraft")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Aircraft")
			}
			return err
		}
	}

	return nil
}

func (m *FlightInputBase) validateAircraftCounterEnd(formats strfmt.Registry) error {
	if swag.IsZero(m.AircraftCounterEnd) { // not required
		return nil
	}

	if err := validate.Pattern("AircraftCounterEnd", "body", m.AircraftCounterEnd, `^\d{1-5}:[0-5][0-9]$`); err != nil {
		return err
	}

	return nil
}

func (m *FlightInputBase) validateAircraftCounterStart(formats strfmt.Registry) error {
	if swag.IsZero(m.AircraftCounterStart) { // not required
		return nil
	}

	if err := validate.Pattern("AircraftCounterStart", "body", m.AircraftCounterStart, `^\d{1-5}:[0-5][0-9]$`); err != nil {
		return err
	}

	return nil
}

func (m *FlightInputBase) validateAreTimesLocal(formats strfmt.Registry) error {

	if err := validate.Required("AreTimesLocal", "body", bool(m.AreTimesLocal)); err != nil {
		return err
	}

	return nil
}

func (m *FlightInputBase) validateArrivalAirport(formats strfmt.Registry) error {

	if err := validate.Required("ArrivalAirport", "body", m.ArrivalAirport); err != nil {
		return err
	}

	if m.ArrivalAirport != nil {
		if err := m.ArrivalAirport.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ArrivalAirport")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ArrivalAirport")
			}
			return err
		}
	}

	return nil
}

func (m *FlightInputBase) validateAutoCalculateDayNightTime(formats strfmt.Registry) error {

	if err := validate.Required("AutoCalculateDayNightTime", "body", bool(m.AutoCalculateDayNightTime)); err != nil {
		return err
	}

	return nil
}

func (m *FlightInputBase) validateChangeIFRToVFRTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ChangeIFRToVFRTime) { // not required
		return nil
	}

	if err := validate.Pattern("ChangeIFRToVFRTime", "body", m.ChangeIFRToVFRTime, `^([0-1][0-9]|2[0-3]):[0-5][0-9]$`); err != nil {
		return err
	}

	return nil
}

func (m *FlightInputBase) validateChangeVFRToIFRTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ChangeVFRToIFRTime) { // not required
		return nil
	}

	if err := validate.Pattern("ChangeVFRToIFRTime", "body", m.ChangeVFRToIFRTime, `^([0-1][0-9]|2[0-3]):[0-5][0-9]$`); err != nil {
		return err
	}

	return nil
}

func (m *FlightInputBase) validateDate(formats strfmt.Registry) error {

	if err := validate.Required("Date", "body", m.Date); err != nil {
		return err
	}

	if err := validate.MinLength("Date", "body", *m.Date, 1); err != nil {
		return err
	}

	if err := validate.Pattern("Date", "body", *m.Date, `^\d{4}\-(0[1-9]|1[0-2])\-(0[1-9]|[1-2][0-9]|3[0-1])$`); err != nil {
		return err
	}

	return nil
}

func (m *FlightInputBase) validateDayNightSequence(formats strfmt.Registry) error {
	if swag.IsZero(m.DayNightSequence) { // not required
		return nil
	}

	return nil
}

func (m *FlightInputBase) validateDepartureAirport(formats strfmt.Registry) error {

	if err := validate.Required("DepartureAirport", "body", m.DepartureAirport); err != nil {
		return err
	}

	if m.DepartureAirport != nil {
		if err := m.DepartureAirport.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DepartureAirport")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DepartureAirport")
			}
			return err
		}
	}

	return nil
}

func (m *FlightInputBase) validateEveningTwilightTime(formats strfmt.Registry) error {
	if swag.IsZero(m.EveningTwilightTime) { // not required
		return nil
	}

	if err := validate.Pattern("EveningTwilightTime", "body", m.EveningTwilightTime, `^([0-1][0-9]|2[0-3]):[0-5][0-9]$`); err != nil {
		return err
	}

	return nil
}

func (m *FlightInputBase) validateIFRApproaches(formats strfmt.Registry) error {

	if err := validate.Required("IFRApproaches", "body", m.IFRApproaches); err != nil {
		return err
	}

	if err := validate.MinimumInt("IFRApproaches", "body", int64(*m.IFRApproaches), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("IFRApproaches", "body", int64(*m.IFRApproaches), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *FlightInputBase) validateIFRDepartures(formats strfmt.Registry) error {

	if err := validate.Required("IFRDepartures", "body", m.IFRDepartures); err != nil {
		return err
	}

	if err := validate.MinimumInt("IFRDepartures", "body", int64(*m.IFRDepartures), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("IFRDepartures", "body", int64(*m.IFRDepartures), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *FlightInputBase) validateLandingTime(formats strfmt.Registry) error {
	if swag.IsZero(m.LandingTime) { // not required
		return nil
	}

	if err := validate.Pattern("LandingTime", "body", m.LandingTime, `^([0-1][0-9]|2[0-3]):[0-5][0-9]$`); err != nil {
		return err
	}

	return nil
}

func (m *FlightInputBase) validateLandings(formats strfmt.Registry) error {

	if err := validate.Required("Landings", "body", m.Landings); err != nil {
		return err
	}

	if err := validate.MinimumInt("Landings", "body", int64(*m.Landings), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("Landings", "body", int64(*m.Landings), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *FlightInputBase) validateMarkers(formats strfmt.Registry) error {
	if swag.IsZero(m.Markers) { // not required
		return nil
	}

	for i := 0; i < len(m.Markers); i++ {
		if swag.IsZero(m.Markers[i]) { // not required
			continue
		}

		if m.Markers[i] != nil {
			if err := m.Markers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Markers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Markers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FlightInputBase) validateMorningTwilightTime(formats strfmt.Registry) error {
	if swag.IsZero(m.MorningTwilightTime) { // not required
		return nil
	}

	if err := validate.Pattern("MorningTwilightTime", "body", m.MorningTwilightTime, `^([0-1][0-9]|2[0-3]):[0-5][0-9]$`); err != nil {
		return err
	}

	return nil
}

func (m *FlightInputBase) validateNightLandings(formats strfmt.Registry) error {

	if err := validate.Required("NightLandings", "body", m.NightLandings); err != nil {
		return err
	}

	if err := validate.MinimumInt("NightLandings", "body", int64(*m.NightLandings), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("NightLandings", "body", int64(*m.NightLandings), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *FlightInputBase) validateNightTakeoffs(formats strfmt.Registry) error {

	if err := validate.Required("NightTakeoffs", "body", m.NightTakeoffs); err != nil {
		return err
	}

	if err := validate.MinimumInt("NightTakeoffs", "body", int64(*m.NightTakeoffs), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("NightTakeoffs", "body", int64(*m.NightTakeoffs), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *FlightInputBase) validateOffBlockTime(formats strfmt.Registry) error {

	if err := validate.Required("OffBlockTime", "body", m.OffBlockTime); err != nil {
		return err
	}

	if err := validate.MinLength("OffBlockTime", "body", *m.OffBlockTime, 1); err != nil {
		return err
	}

	if err := validate.Pattern("OffBlockTime", "body", *m.OffBlockTime, `^([0-1][0-9]|2[0-3]):[0-5][0-9]$`); err != nil {
		return err
	}

	return nil
}

func (m *FlightInputBase) validateOnBlockTime(formats strfmt.Registry) error {

	if err := validate.Required("OnBlockTime", "body", m.OnBlockTime); err != nil {
		return err
	}

	if err := validate.MinLength("OnBlockTime", "body", *m.OnBlockTime, 1); err != nil {
		return err
	}

	if err := validate.Pattern("OnBlockTime", "body", *m.OnBlockTime, `^([0-1][0-9]|2[0-3]):[0-5][0-9]$`); err != nil {
		return err
	}

	return nil
}

func (m *FlightInputBase) validatePICName(formats strfmt.Registry) error {

	if err := validate.Required("PICName", "body", m.PICName); err != nil {
		return err
	}

	if err := validate.MinLength("PICName", "body", *m.PICName, 1); err != nil {
		return err
	}

	return nil
}

func (m *FlightInputBase) validatePilotFunction(formats strfmt.Registry) error {

	if err := validate.Required("PilotFunction", "body", m.PilotFunction); err != nil {
		return err
	}

	if err := validate.Required("PilotFunction", "body", m.PilotFunction); err != nil {
		return err
	}

	if m.PilotFunction != nil {
		if err := m.PilotFunction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PilotFunction")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PilotFunction")
			}
			return err
		}
	}

	return nil
}

func (m *FlightInputBase) validateTakeoffTime(formats strfmt.Registry) error {
	if swag.IsZero(m.TakeoffTime) { // not required
		return nil
	}

	if err := validate.Pattern("TakeoffTime", "body", m.TakeoffTime, `^([0-1][0-9]|2[0-3]):[0-5][0-9]$`); err != nil {
		return err
	}

	return nil
}

func (m *FlightInputBase) validateTakeoffs(formats strfmt.Registry) error {

	if err := validate.Required("Takeoffs", "body", m.Takeoffs); err != nil {
		return err
	}

	if err := validate.MinimumInt("Takeoffs", "body", int64(*m.Takeoffs), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("Takeoffs", "body", int64(*m.Takeoffs), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *FlightInputBase) validateTypeOfFlight(formats strfmt.Registry) error {

	if err := validate.Required("TypeOfFlight", "body", m.TypeOfFlight); err != nil {
		return err
	}

	if err := validate.Required("TypeOfFlight", "body", m.TypeOfFlight); err != nil {
		return err
	}

	if m.TypeOfFlight != nil {
		if err := m.TypeOfFlight.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TypeOfFlight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TypeOfFlight")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this flight input base based on the context it is used
func (m *FlightInputBase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAircraft(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateArrivalAirport(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDayNightSequence(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDepartureAirport(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMarkers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePilotFunction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeOfFlight(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FlightInputBase) contextValidateAircraft(ctx context.Context, formats strfmt.Registry) error {

	if m.Aircraft != nil {

		if swag.IsZero(m.Aircraft) { // not required
			return nil
		}

		if err := m.Aircraft.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Aircraft")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Aircraft")
			}
			return err
		}
	}

	return nil
}

func (m *FlightInputBase) contextValidateArrivalAirport(ctx context.Context, formats strfmt.Registry) error {

	if m.ArrivalAirport != nil {

		if err := m.ArrivalAirport.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ArrivalAirport")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ArrivalAirport")
			}
			return err
		}
	}

	return nil
}

func (m *FlightInputBase) contextValidateDayNightSequence(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *FlightInputBase) contextValidateDepartureAirport(ctx context.Context, formats strfmt.Registry) error {

	if m.DepartureAirport != nil {

		if err := m.DepartureAirport.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DepartureAirport")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DepartureAirport")
			}
			return err
		}
	}

	return nil
}

func (m *FlightInputBase) contextValidateMarkers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Markers); i++ {

		if m.Markers[i] != nil {

			if swag.IsZero(m.Markers[i]) { // not required
				return nil
			}

			if err := m.Markers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Markers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Markers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FlightInputBase) contextValidatePilotFunction(ctx context.Context, formats strfmt.Registry) error {

	if m.PilotFunction != nil {

		if err := m.PilotFunction.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PilotFunction")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PilotFunction")
			}
			return err
		}
	}

	return nil
}

func (m *FlightInputBase) contextValidateTypeOfFlight(ctx context.Context, formats strfmt.Registry) error {

	if m.TypeOfFlight != nil {

		if err := m.TypeOfFlight.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TypeOfFlight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TypeOfFlight")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FlightInputBase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FlightInputBase) UnmarshalBinary(b []byte) error {
	var res FlightInputBase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
