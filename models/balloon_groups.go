// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// BalloonGroups balloon groups
//
// swagger:model BalloonGroups
type BalloonGroups string

func NewBalloonGroups(value BalloonGroups) *BalloonGroups {
	return &value
}

// Pointer returns a pointer to a freshly-allocated BalloonGroups.
func (m BalloonGroups) Pointer() *BalloonGroups {
	return &m
}

const (

	// BalloonGroupsGroupA captures enum value "GroupA"
	BalloonGroupsGroupA BalloonGroups = "GroupA"

	// BalloonGroupsGroupB captures enum value "GroupB"
	BalloonGroupsGroupB BalloonGroups = "GroupB"

	// BalloonGroupsGroupC captures enum value "GroupC"
	BalloonGroupsGroupC BalloonGroups = "GroupC"

	// BalloonGroupsGroupD captures enum value "GroupD"
	BalloonGroupsGroupD BalloonGroups = "GroupD"

	// BalloonGroupsGas captures enum value "Gas"
	BalloonGroupsGas BalloonGroups = "Gas"
)

// for schema
var balloonGroupsEnum []interface{}

func init() {
	var res []BalloonGroups
	if err := json.Unmarshal([]byte(`["GroupA","GroupB","GroupC","GroupD","Gas"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		balloonGroupsEnum = append(balloonGroupsEnum, v)
	}
}

func (m BalloonGroups) validateBalloonGroupsEnum(path, location string, value BalloonGroups) error {
	if err := validate.EnumCase(path, location, value, balloonGroupsEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this balloon groups
func (m BalloonGroups) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateBalloonGroupsEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this balloon groups based on context it is used
func (m BalloonGroups) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
