// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BalloonFlightInputBase Represents a balloon flight to be created in capzlog.aero
//
// swagger:model BalloonFlightInputBase
type BalloonFlightInputBase struct {

	// aircraft
	Aircraft *BalloonInput `json:"Aircraft,omitempty"`

	// are times local
	// Required: true
	AreTimesLocal bool `json:"AreTimesLocal"`

	// arrival
	// Required: true
	// Min Length: 1
	Arrival *string `json:"Arrival"`

	// date
	// Required: true
	// Min Length: 1
	// Pattern: ^\d{4}\-(0[1-9]|1[0-2])\-(0[1-9]|[1-2][0-9]|3[0-1])$
	// Format: date-time
	Date *strfmt.DateTime `json:"Date"`

	// The day/night sequence of the BalloonFlight
	// Required: true
	DayNightSequence struct {
		DayNightSequences
	} `json:"DayNightSequence"`

	// departure
	// Required: true
	// Min Length: 1
	Departure *string `json:"Departure"`

	// distance in kilometers
	DistanceInKilometers int32 `json:"DistanceInKilometers,omitempty"`

	// evening twilight time
	// Pattern: ^([0-1][0-9]|2[0-3]):[0-5][0-9]$
	// Format: duration
	EveningTwilightTime strfmt.Duration `json:"EveningTwilightTime,omitempty"`

	// inflations
	Inflations int32 `json:"Inflations,omitempty"`

	// landing time
	// Required: true
	// Min Length: 1
	// Pattern: ^([0-1][0-9]|2[0-3]):[0-5][0-9]$
	// Format: duration
	LandingTime *strfmt.Duration `json:"LandingTime"`

	// landings
	// Required: true
	// Maximum: 100
	// Minimum: 0
	Landings *int32 `json:"Landings"`

	// markers
	Markers []*Marker `json:"Markers"`

	// morning twilight time
	// Pattern: ^([0-1][0-9]|2[0-3]):[0-5][0-9]$
	// Format: duration
	MorningTwilightTime strfmt.Duration `json:"MorningTwilightTime,omitempty"`

	// night landings
	// Required: true
	// Maximum: 100
	// Minimum: 0
	NightLandings *int32 `json:"NightLandings"`

	// night takeoffs
	// Required: true
	// Maximum: 100
	// Minimum: 0
	NightTakeoffs *int32 `json:"NightTakeoffs"`

	// number of passengers
	NumberOfPassengers int32 `json:"NumberOfPassengers,omitempty"`

	// p i c name
	// Required: true
	// Min Length: 1
	PICName *string `json:"PICName"`

	// pilot function
	// Required: true
	PilotFunction *PilotFunctions `json:"PilotFunction"`

	// remark
	Remark string `json:"Remark,omitempty"`

	// takeoff time
	// Required: true
	// Min Length: 1
	// Pattern: ^([0-1][0-9]|2[0-3]):[0-5][0-9]$
	// Format: duration
	TakeoffTime *strfmt.Duration `json:"TakeoffTime"`

	// takeoffs
	// Required: true
	// Maximum: 100
	// Minimum: 0
	Takeoffs *int32 `json:"Takeoffs"`
}

// Validate validates this balloon flight input base
func (m *BalloonFlightInputBase) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAircraft(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAreTimesLocal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArrival(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDayNightSequence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeparture(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEveningTwilightTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLandingTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLandings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarkers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMorningTwilightTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNightLandings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNightTakeoffs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePICName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePilotFunction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTakeoffTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTakeoffs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BalloonFlightInputBase) validateAircraft(formats strfmt.Registry) error {
	if swag.IsZero(m.Aircraft) { // not required
		return nil
	}

	if m.Aircraft != nil {
		if err := m.Aircraft.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Aircraft")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Aircraft")
			}
			return err
		}
	}

	return nil
}

func (m *BalloonFlightInputBase) validateAreTimesLocal(formats strfmt.Registry) error {

	if err := validate.Required("AreTimesLocal", "body", bool(m.AreTimesLocal)); err != nil {
		return err
	}

	return nil
}

func (m *BalloonFlightInputBase) validateArrival(formats strfmt.Registry) error {

	if err := validate.Required("Arrival", "body", m.Arrival); err != nil {
		return err
	}

	if err := validate.MinLength("Arrival", "body", *m.Arrival, 1); err != nil {
		return err
	}

	return nil
}

func (m *BalloonFlightInputBase) validateDate(formats strfmt.Registry) error {

	if err := validate.Required("Date", "body", m.Date); err != nil {
		return err
	}

	if err := validate.MinLength("Date", "body", m.Date.String(), 1); err != nil {
		return err
	}

	if err := validate.Pattern("Date", "body", m.Date.String(), `^\d{4}\-(0[1-9]|1[0-2])\-(0[1-9]|[1-2][0-9]|3[0-1])$`); err != nil {
		return err
	}

	if err := validate.FormatOf("Date", "body", "date-time", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BalloonFlightInputBase) validateDayNightSequence(formats strfmt.Registry) error {

	return nil
}

func (m *BalloonFlightInputBase) validateDeparture(formats strfmt.Registry) error {

	if err := validate.Required("Departure", "body", m.Departure); err != nil {
		return err
	}

	if err := validate.MinLength("Departure", "body", *m.Departure, 1); err != nil {
		return err
	}

	return nil
}

func (m *BalloonFlightInputBase) validateEveningTwilightTime(formats strfmt.Registry) error {
	if swag.IsZero(m.EveningTwilightTime) { // not required
		return nil
	}

	if err := validate.Pattern("EveningTwilightTime", "body", m.EveningTwilightTime.String(), `^([0-1][0-9]|2[0-3]):[0-5][0-9]$`); err != nil {
		return err
	}

	if err := validate.FormatOf("EveningTwilightTime", "body", "duration", m.EveningTwilightTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BalloonFlightInputBase) validateLandingTime(formats strfmt.Registry) error {

	if err := validate.Required("LandingTime", "body", m.LandingTime); err != nil {
		return err
	}

	if err := validate.MinLength("LandingTime", "body", m.LandingTime.String(), 1); err != nil {
		return err
	}

	if err := validate.Pattern("LandingTime", "body", m.LandingTime.String(), `^([0-1][0-9]|2[0-3]):[0-5][0-9]$`); err != nil {
		return err
	}

	if err := validate.FormatOf("LandingTime", "body", "duration", m.LandingTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BalloonFlightInputBase) validateLandings(formats strfmt.Registry) error {

	if err := validate.Required("Landings", "body", m.Landings); err != nil {
		return err
	}

	if err := validate.MinimumInt("Landings", "body", int64(*m.Landings), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("Landings", "body", int64(*m.Landings), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *BalloonFlightInputBase) validateMarkers(formats strfmt.Registry) error {
	if swag.IsZero(m.Markers) { // not required
		return nil
	}

	for i := 0; i < len(m.Markers); i++ {
		if swag.IsZero(m.Markers[i]) { // not required
			continue
		}

		if m.Markers[i] != nil {
			if err := m.Markers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Markers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Markers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BalloonFlightInputBase) validateMorningTwilightTime(formats strfmt.Registry) error {
	if swag.IsZero(m.MorningTwilightTime) { // not required
		return nil
	}

	if err := validate.Pattern("MorningTwilightTime", "body", m.MorningTwilightTime.String(), `^([0-1][0-9]|2[0-3]):[0-5][0-9]$`); err != nil {
		return err
	}

	if err := validate.FormatOf("MorningTwilightTime", "body", "duration", m.MorningTwilightTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BalloonFlightInputBase) validateNightLandings(formats strfmt.Registry) error {

	if err := validate.Required("NightLandings", "body", m.NightLandings); err != nil {
		return err
	}

	if err := validate.MinimumInt("NightLandings", "body", int64(*m.NightLandings), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("NightLandings", "body", int64(*m.NightLandings), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *BalloonFlightInputBase) validateNightTakeoffs(formats strfmt.Registry) error {

	if err := validate.Required("NightTakeoffs", "body", m.NightTakeoffs); err != nil {
		return err
	}

	if err := validate.MinimumInt("NightTakeoffs", "body", int64(*m.NightTakeoffs), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("NightTakeoffs", "body", int64(*m.NightTakeoffs), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *BalloonFlightInputBase) validatePICName(formats strfmt.Registry) error {

	if err := validate.Required("PICName", "body", m.PICName); err != nil {
		return err
	}

	if err := validate.MinLength("PICName", "body", *m.PICName, 1); err != nil {
		return err
	}

	return nil
}

func (m *BalloonFlightInputBase) validatePilotFunction(formats strfmt.Registry) error {

	if err := validate.Required("PilotFunction", "body", m.PilotFunction); err != nil {
		return err
	}

	if err := validate.Required("PilotFunction", "body", m.PilotFunction); err != nil {
		return err
	}

	if m.PilotFunction != nil {
		if err := m.PilotFunction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PilotFunction")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PilotFunction")
			}
			return err
		}
	}

	return nil
}

func (m *BalloonFlightInputBase) validateTakeoffTime(formats strfmt.Registry) error {

	if err := validate.Required("TakeoffTime", "body", m.TakeoffTime); err != nil {
		return err
	}

	if err := validate.MinLength("TakeoffTime", "body", m.TakeoffTime.String(), 1); err != nil {
		return err
	}

	if err := validate.Pattern("TakeoffTime", "body", m.TakeoffTime.String(), `^([0-1][0-9]|2[0-3]):[0-5][0-9]$`); err != nil {
		return err
	}

	if err := validate.FormatOf("TakeoffTime", "body", "duration", m.TakeoffTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BalloonFlightInputBase) validateTakeoffs(formats strfmt.Registry) error {

	if err := validate.Required("Takeoffs", "body", m.Takeoffs); err != nil {
		return err
	}

	if err := validate.MinimumInt("Takeoffs", "body", int64(*m.Takeoffs), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("Takeoffs", "body", int64(*m.Takeoffs), 100, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this balloon flight input base based on the context it is used
func (m *BalloonFlightInputBase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAircraft(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDayNightSequence(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMarkers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePilotFunction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BalloonFlightInputBase) contextValidateAircraft(ctx context.Context, formats strfmt.Registry) error {

	if m.Aircraft != nil {
		if err := m.Aircraft.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Aircraft")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Aircraft")
			}
			return err
		}
	}

	return nil
}

func (m *BalloonFlightInputBase) contextValidateDayNightSequence(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *BalloonFlightInputBase) contextValidateMarkers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Markers); i++ {

		if m.Markers[i] != nil {
			if err := m.Markers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Markers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Markers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BalloonFlightInputBase) contextValidatePilotFunction(ctx context.Context, formats strfmt.Registry) error {

	if m.PilotFunction != nil {
		if err := m.PilotFunction.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PilotFunction")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PilotFunction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BalloonFlightInputBase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BalloonFlightInputBase) UnmarshalBinary(b []byte) error {
	var res BalloonFlightInputBase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
