// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DST d s t
//
// swagger:model DST
type DST string

func NewDST(value DST) *DST {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DST.
func (m DST) Pointer() *DST {
	return &m
}

const (

	// DSTUnknown captures enum value "Unknown"
	DSTUnknown DST = "Unknown"

	// DSTEurope captures enum value "Europe"
	DSTEurope DST = "Europe"

	// DSTNorthAmerica captures enum value "NorthAmerica"
	DSTNorthAmerica DST = "NorthAmerica"

	// DSTSouthAmerica captures enum value "SouthAmerica"
	DSTSouthAmerica DST = "SouthAmerica"

	// DSTAustralia captures enum value "Australia"
	DSTAustralia DST = "Australia"

	// DSTNewZealand captures enum value "NewZealand"
	DSTNewZealand DST = "NewZealand"

	// DSTNone captures enum value "None"
	DSTNone DST = "None"
)

// for schema
var dSTEnum []interface{}

func init() {
	var res []DST
	if err := json.Unmarshal([]byte(`["Unknown","Europe","NorthAmerica","SouthAmerica","Australia","NewZealand","None"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dSTEnum = append(dSTEnum, v)
	}
}

func (m DST) validateDSTEnum(path, location string, value DST) error {
	if err := validate.EnumCase(path, location, value, dSTEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this d s t
func (m DST) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDSTEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this d s t based on context it is used
func (m DST) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
