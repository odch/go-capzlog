// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AirportInput airport input
//
// swagger:model AirportInput
type AirportInput struct {

	// altitude in feet
	AltitudeInFeet int32 `json:"AltitudeInFeet,omitempty"`

	// city
	City string `json:"City,omitempty"`

	// The country ISO 3166 alpha 2 code. Required for new/non-existing airports. Ignored for existing airports
	CountryAlpha2 string `json:"CountryAlpha2,omitempty"`

	// The type of Daylight Saving Time observed. Required for new/non-existing airports. Ignored for existing airports
	// Enum: ["Unknown","Europe","NorthAmerica","SouthAmerica","Australia","NewZealand","None"]
	DST string `json:"DST,omitempty"`

	// A free text name of the airport or landing location. Shall only be used if the ICAO code is a no location indicator ZZZZ or abXX where ab is the country prefix, e.g. LSXX for no location indicator in Switzerland
	FreeText string `json:"FreeText,omitempty"`

	// i c a o code
	// Required: true
	// Min Length: 1
	ICAOCode *string `json:"ICAOCode"`

	// The latitude in decimal degree (DD) format. Value between -90 and +90. Required for new/non-existing airports. Ignored for existing airports
	Latitude float64 `json:"Latitude,omitempty"`

	// The longitude in decimal degree (DD) format. Value between -180 and +180. Required for new/non-existing airports. Ignored for existing airports
	Longitude float64 `json:"Longitude,omitempty"`

	// Required for new/non-existing airports. Ignored for existing airports
	Name string `json:"Name,omitempty"`

	// The UTC offset in hours. Partial hours, e.g. -1h15m, are represented as decimal numbers, e.g. -1.25. Required for new/non-existing airports. Ignored for existing airports
	UTCOffset float64 `json:"UTCOffset,omitempty"`
}

// Validate validates this airport input
func (m *AirportInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDST(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateICAOCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var airportInputTypeDSTPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","Europe","NorthAmerica","SouthAmerica","Australia","NewZealand","None"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		airportInputTypeDSTPropEnum = append(airportInputTypeDSTPropEnum, v)
	}
}

const (

	// AirportInputDSTUnknown captures enum value "Unknown"
	AirportInputDSTUnknown string = "Unknown"

	// AirportInputDSTEurope captures enum value "Europe"
	AirportInputDSTEurope string = "Europe"

	// AirportInputDSTNorthAmerica captures enum value "NorthAmerica"
	AirportInputDSTNorthAmerica string = "NorthAmerica"

	// AirportInputDSTSouthAmerica captures enum value "SouthAmerica"
	AirportInputDSTSouthAmerica string = "SouthAmerica"

	// AirportInputDSTAustralia captures enum value "Australia"
	AirportInputDSTAustralia string = "Australia"

	// AirportInputDSTNewZealand captures enum value "NewZealand"
	AirportInputDSTNewZealand string = "NewZealand"

	// AirportInputDSTNone captures enum value "None"
	AirportInputDSTNone string = "None"
)

// prop value enum
func (m *AirportInput) validateDSTEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, airportInputTypeDSTPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AirportInput) validateDST(formats strfmt.Registry) error {
	if swag.IsZero(m.DST) { // not required
		return nil
	}

	// value enum
	if err := m.validateDSTEnum("DST", "body", m.DST); err != nil {
		return err
	}

	return nil
}

func (m *AirportInput) validateICAOCode(formats strfmt.Registry) error {

	if err := validate.Required("ICAOCode", "body", m.ICAOCode); err != nil {
		return err
	}

	if err := validate.MinLength("ICAOCode", "body", *m.ICAOCode, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this airport input based on context it is used
func (m *AirportInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AirportInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AirportInput) UnmarshalBinary(b []byte) error {
	var res AirportInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
