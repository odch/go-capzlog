// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// UpdateStatus update status
//
// swagger:model UpdateStatus
type UpdateStatus string

func NewUpdateStatus(value UpdateStatus) *UpdateStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated UpdateStatus.
func (m UpdateStatus) Pointer() *UpdateStatus {
	return &m
}

const (

	// UpdateStatusSuccess captures enum value "Success"
	UpdateStatusSuccess UpdateStatus = "Success"

	// UpdateStatusModifiedByUser captures enum value "ModifiedByUser"
	UpdateStatusModifiedByUser UpdateStatus = "ModifiedByUser"

	// UpdateStatusDeletedByUser captures enum value "DeletedByUser"
	UpdateStatusDeletedByUser UpdateStatus = "DeletedByUser"
)

// for schema
var updateStatusEnum []interface{}

func init() {
	var res []UpdateStatus
	if err := json.Unmarshal([]byte(`["Success","ModifiedByUser","DeletedByUser"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateStatusEnum = append(updateStatusEnum, v)
	}
}

func (m UpdateStatus) validateUpdateStatusEnum(path, location string, value UpdateStatus) error {
	if err := validate.EnumCase(path, location, value, updateStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this update status
func (m UpdateStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateUpdateStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this update status based on context it is used
func (m UpdateStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
