{
  "x-generator": "NSwag v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))",
  "swagger": "2.0",
  "info": {
    "title": "capzlog.aero REST Services",
    "description": "\r\n<h3>General</h3>\r\n<p>Use these services to send and retrieve data to and from capzlog.aero.</p>\r\n<p>Any external system can access only objects for the authorized users only and only objects available for this system. E.g. an external system processing flights can retrieve only flights created by it.</p>\r\n\r\n<h3>Authorization</h3>\r\n<p>An authorization token is used to identify the user and external system. The token is generated in the capzlog.aero account by the user and shall be sent with each request in a header called \"Authorization\" in the format \"Basic &lt;token&gt;\".</p>\r\n\r\n<h3>External System Instance Identifier</h3>\r\n<p>Each call from an external system must provide a header with the name \"SystemInstanceIdentifier\" and a specific value for the corresponding external system type and instance. These values are generated by capzlog.aero and provided to the integrator individually.</p>\r\n\r\n<h3>User Roles</h3>\r\n<p>Each call from an external system may provide a header with the name \"UserRoles\" and a list of user roles, e.g. 'pilot', 'student', 'instructor', 'owner', which define what benefits the user is entitled to (depending on business contact with capzlog.aero). The following rules apply:</p>\r\n<ul>\r\n\t<li>Role names cannot contain commas.</li>\r\n\t<li>Multiple user roles can be sent either as multiple \"UserRoles\" headers (repeated) or in one \"UserRoles\" header separated by comma.</li>\r\n\t<li>Sending a \"UserRoles\" will override the existing roles for the user completely.</li>\r\n\t<li>An empty \"UserRoles\" header will remove all existing user roles.</li>\r\n\t<li>A missing \"UserRoles\" header will not change the existing user roles.</li>\r\n</ul>\r\n\r\n<h3>Method Behaviour</h3>\r\n<ul>\r\n\r\n<li>GET (all):\r\n<ul>\r\n<li>Returns all objects or a subset based on the provided search parameters</li>\r\n<li>Implemented only for some objects</li>\r\n</ul>\r\n</li>\r\n\r\n<li>GET (with identifier):\r\n<ul>\r\n<li>Retrieves the object with the specified identifier, if it exists</li>\r\n<li>Returns error 404 (not found) if the object does not exist</li>\r\n</ul>\r\n</li>\r\n\r\n<li>POST:\r\n<ul>\r\n<li>Creates the object with the specified identifier, if it does not exist</li>\r\n<li>Overwrites the object with the specified identifier, if it already exists</li>\r\n<li>Returns the newly created object as result</li>\r\n</ul>\r\n</li>\r\n\r\n<li>PUT:\r\n<ul>\r\n<li>Updates the object with the specified identifier, if it exists</li>\r\n<li>Creates the object with the specified identifier, if it does not exist</li>\r\n<li>Returns the modified object as result</li>\r\n</ul>\r\n</li>\r\n\r\n<li>DELETE:\r\n<ul>\r\n<li>Deletes the object with the specified identifier, if it exists</li>\r\n<li>Returns 200 (success) if the object does not exist</li>\r\n</ul>\r\n</li>\r\n\r\n</ul>\r\n\r\n<h3>Data Formatting</h3>\r\n<ul>\r\n<li>Date only values (e.g. date of flight): yyyy-mm-dd</li>\r\n<li>Times of day (e.g. off/on block time): hh:mm</li>\r\n<li>Durations (e.g. flight time): hh:mm; if value is above 24 hours (e.g. for sums) hhhhh:mm (hour digits as many as needed)</li>\r\n<li>Counters (e.g. aircraft counter): hhhhh:mm (hour digits as many as needed)</li>\r\n</ul>\r\n\r\n",
    "termsOfService": "https://capzlog.aero/terms-of-use",
    "contact": {
      "name": "capzlog.aero",
      "url": "https://capzlog.aero/contact"
    },
    "version": "1.0.0"
  },
  "host": "test.capzlog.aero",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/pel/public/externalsystemactivation": {
      "post": {
        "tags": [
          "ExternalSystemActivation"
        ],
        "summary": "Activate the external system connection",
        "operationId": "ExternalSystemActivation_Post",
        "parameters": [
          {
            "name": "inputEntity",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ExternalSystemConnectionActivationInput"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "",
            "schema": {
              "$ref": "#/definitions/ExternalSystemConnectionActivationOutput"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      }
    },
    "/api/pel/public/externalsystemsimulatorsessions/{id}": {
      "get": {
        "tags": [
          "ExternalSystemSimulatorSessions"
        ],
        "summary": "Get a simulatorSession from capzlog.aero based on the ExternalSystemUniqueID",
        "operationId": "ExternalSystemSimulatorSessions_Get",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ExternalSystemUniqueID of the simulatorSession to retrieve",
            "pattern": "^\\w{1-100}$",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "",
            "schema": {
              "$ref": "#/definitions/ExternalSystemSimulatorSessionOutput"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "put": {
        "tags": [
          "ExternalSystemSimulatorSessions"
        ],
        "summary": "Modify an existing simulatorSession in capzlog.aero",
        "operationId": "ExternalSystemSimulatorSessions_Put",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ExternalSystemUniqueID of the simulatorSession to be modified",
            "pattern": "^\\w{1-100}$",
            "x-nullable": false
          },
          {
            "name": "inputEntity",
            "in": "body",
            "description": "Full data of the simulatorSession to be edited",
            "schema": {
              "$ref": "#/definitions/ExternalSystemSimulatorSessionInput"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "",
            "schema": {
              "$ref": "#/definitions/ExternalSystemSimulatorSessionOutput"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ExternalSystemSimulatorSessions"
        ],
        "summary": "Delete an existing simulatorSession in capzlog.aero",
        "operationId": "ExternalSystemSimulatorSessions_Delete",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ExternalSystemUniqueID of the simulatorSession to be deleted",
            "pattern": "^\\w{1-100}$",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "",
            "schema": {
              "type": "file"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      }
    },
    "/api/pel/public/externalsystemsimulatorsessions": {
      "post": {
        "tags": [
          "ExternalSystemSimulatorSessions"
        ],
        "summary": "Create a simulatorSession in capzlog.aero",
        "operationId": "ExternalSystemSimulatorSessions_Post",
        "parameters": [
          {
            "name": "inputEntity",
            "in": "body",
            "description": "SimulatorSession to be created",
            "schema": {
              "$ref": "#/definitions/ExternalSystemSimulatorSessionInput"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "",
            "schema": {
              "$ref": "#/definitions/ExternalSystemSimulatorSessionOutput"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      }
    },
    "/api/pel/public/externalsystemsimulatorSessions/PostMultiple": {
      "post": {
        "tags": [
          "ExternalSystemSimulatorSessions"
        ],
        "summary": "Create multiple simulator sessions in capzlog.aero",
        "operationId": "ExternalSystemSimulatorSessions_PostMultiple",
        "parameters": [
          {
            "name": "inputEntities",
            "in": "body",
            "description": "Simulator sessions to be created",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExternalSystemSimulatorSessionInput"
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "",
            "schema": {
              "type": "file"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      }
    },
    "/api/pel/public/externalsystemsailplaneflights/{id}": {
      "get": {
        "tags": [
          "ExternalSystemSailplaneFlights"
        ],
        "summary": "Get a sailplaneFlight from capzlog.aero based on the ExternalSystemUniqueID",
        "operationId": "ExternalSystemSailplaneFlights_Get",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ExternalSystemUniqueID of the sailplaneFlight to retrieve",
            "pattern": "^\\w{1-100}$",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "",
            "schema": {
              "$ref": "#/definitions/ExternalSystemSailplaneFlightOutput"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "put": {
        "tags": [
          "ExternalSystemSailplaneFlights"
        ],
        "summary": "Modify an existing sailplaneFlight in capzlog.aero",
        "operationId": "ExternalSystemSailplaneFlights_Put",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ExternalSystemUniqueID of the sailplaneFlight to be modified",
            "pattern": "^\\w{1-100}$",
            "x-nullable": false
          },
          {
            "name": "inputEntity",
            "in": "body",
            "description": "Full data of the sailplaneFlight to be edited",
            "schema": {
              "$ref": "#/definitions/ExternalSystemSailplaneFlightInput"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "",
            "schema": {
              "$ref": "#/definitions/ExternalSystemSailplaneFlightOutput"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ExternalSystemSailplaneFlights"
        ],
        "summary": "Delete an existing sailplaneFlight in capzlog.aero",
        "operationId": "ExternalSystemSailplaneFlights_Delete",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ExternalSystemUniqueID of the sailplaneFlight to be deleted",
            "pattern": "^\\w{1-100}$",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "",
            "schema": {
              "type": "file"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      }
    },
    "/api/pel/public/externalsystemsailplaneflights": {
      "post": {
        "tags": [
          "ExternalSystemSailplaneFlights"
        ],
        "summary": "Create a sailplaneFlight in capzlog.aero",
        "operationId": "ExternalSystemSailplaneFlights_Post",
        "parameters": [
          {
            "name": "inputEntity",
            "in": "body",
            "description": "SailplaneFlight to be created",
            "schema": {
              "$ref": "#/definitions/ExternalSystemSailplaneFlightInput"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "",
            "schema": {
              "$ref": "#/definitions/ExternalSystemSailplaneFlightOutput"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      }
    },
    "/api/pel/public/externalsystemsailplaneflights/PostMultiple": {
      "post": {
        "tags": [
          "ExternalSystemSailplaneFlights"
        ],
        "summary": "Create multiple sailplane flights in capzlog.aero",
        "operationId": "ExternalSystemSailplaneFlights_PostMultiple",
        "parameters": [
          {
            "name": "inputEntities",
            "in": "body",
            "description": "Sailplane flights to be created",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExternalSystemSailplaneFlightInput"
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "",
            "schema": {
              "type": "file"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      }
    },
    "/api/pel/public/externalsystemballoonflights/{id}": {
      "get": {
        "tags": [
          "ExternalSystemBalloonFlights"
        ],
        "summary": "Get a balloonFlight from capzlog.aero based on the ExternalSystemUniqueID",
        "operationId": "ExternalSystemBalloonFlights_Get",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ExternalSystemUniqueID of the balloonFlight to retrieve",
            "pattern": "^\\w{1-100}$",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "",
            "schema": {
              "$ref": "#/definitions/ExternalSystemBalloonFlightOutput"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "put": {
        "tags": [
          "ExternalSystemBalloonFlights"
        ],
        "summary": "Modify an existing balloonFlight in capzlog.aero",
        "operationId": "ExternalSystemBalloonFlights_Put",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ExternalSystemUniqueID of the balloonFlight to be modified",
            "pattern": "^\\w{1-100}$",
            "x-nullable": false
          },
          {
            "name": "inputEntity",
            "in": "body",
            "description": "Full data of the balloonFlight to be edited",
            "schema": {
              "$ref": "#/definitions/ExternalSystemBalloonFlightInput"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "",
            "schema": {
              "$ref": "#/definitions/ExternalSystemBalloonFlightOutput"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ExternalSystemBalloonFlights"
        ],
        "summary": "Delete an existing balloonFlight in capzlog.aero",
        "operationId": "ExternalSystemBalloonFlights_Delete",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ExternalSystemUniqueID of the balloonFlight to be deleted",
            "pattern": "^\\w{1-100}$",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "",
            "schema": {
              "type": "file"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      }
    },
    "/api/pel/public/externalsystemballoonflights": {
      "post": {
        "tags": [
          "ExternalSystemBalloonFlights"
        ],
        "summary": "Create a balloonFlight in capzlog.aero",
        "operationId": "ExternalSystemBalloonFlights_Post",
        "parameters": [
          {
            "name": "inputEntity",
            "in": "body",
            "description": "BalloonFlight to be created",
            "schema": {
              "$ref": "#/definitions/ExternalSystemBalloonFlightInput"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "",
            "schema": {
              "$ref": "#/definitions/ExternalSystemBalloonFlightOutput"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      }
    },
    "/api/pel/public/externalsystemballoonflights/PostMultiple": {
      "post": {
        "tags": [
          "ExternalSystemBalloonFlights"
        ],
        "summary": "Create multiple balloon flights in capzlog.aero",
        "operationId": "ExternalSystemBalloonFlights_PostMultiple",
        "parameters": [
          {
            "name": "inputEntities",
            "in": "body",
            "description": "Balloon flights to be created",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExternalSystemBalloonFlightInput"
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "",
            "schema": {
              "type": "file"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      }
    },
    "/api/pel/public/externalsystemflights/{id}": {
      "get": {
        "tags": [
          "ExternalSystemFlights"
        ],
        "summary": "Get a flight from capzlog.aero based on the ExternalSystemUniqueID",
        "operationId": "ExternalSystemFlights_Get",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ExternalSystemUniqueID of the flight to retrieve",
            "pattern": "^\\w{1-100}$",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "",
            "schema": {
              "$ref": "#/definitions/ExternalSystemFlightOutput"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "put": {
        "tags": [
          "ExternalSystemFlights"
        ],
        "summary": "Modify an existing flight in capzlog.aero",
        "operationId": "ExternalSystemFlights_Put",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ExternalSystemUniqueID of the flight to be modified",
            "pattern": "^\\w{1-100}$",
            "x-nullable": false
          },
          {
            "name": "inputEntity",
            "in": "body",
            "description": "Full data of the flight to be edited",
            "schema": {
              "$ref": "#/definitions/ExternalSystemFlightInput"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "",
            "schema": {
              "$ref": "#/definitions/ExternalSystemFlightOutput"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ExternalSystemFlights"
        ],
        "summary": "Delete an existing flight in capzlog.aero",
        "operationId": "ExternalSystemFlights_Delete",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ExternalSystemUniqueID of the flight to be deleted",
            "pattern": "^\\w{1-100}$",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "",
            "schema": {
              "type": "file"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      }
    },
    "/api/pel/public/externalsystemflights": {
      "post": {
        "tags": [
          "ExternalSystemFlights"
        ],
        "summary": "Create a flight in capzlog.aero",
        "operationId": "ExternalSystemFlights_Post",
        "parameters": [
          {
            "name": "inputEntity",
            "in": "body",
            "description": "Flight to be created",
            "schema": {
              "$ref": "#/definitions/ExternalSystemFlightInput"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "",
            "schema": {
              "$ref": "#/definitions/ExternalSystemFlightOutput"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      }
    },
    "/api/pel/public/externalsystemflights/PostMultiple": {
      "post": {
        "tags": [
          "ExternalSystemFlights"
        ],
        "summary": "Create multiple flights in capzlog.aero",
        "operationId": "ExternalSystemFlights_PostMultiple",
        "parameters": [
          {
            "name": "inputEntities",
            "in": "body",
            "description": "Flights to be created",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExternalSystemFlightInput"
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "",
            "schema": {
              "type": "file"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      }
    }
  },
  "definitions": {
    "ExternalSystemConnectionActivationOutput": {
      "allOf": [
        {
          "$ref": "#/definitions/ExternalSystemConnectionActivationBase"
        },
        {
          "type": "object"
        }
      ]
    },
    "ExternalSystemConnectionActivationBase": {
      "type": "object"
    },
    "ExternalSystemConnectionActivationInput": {
      "allOf": [
        {
          "$ref": "#/definitions/ExternalSystemConnectionActivationBase"
        },
        {
          "type": "object"
        }
      ]
    },
    "ExternalSystemSimulatorSessionOutput": {
      "allOf": [
        {
          "$ref": "#/definitions/SimulatorSessionOutputBase"
        },
        {
          "type": "object",
          "description": "Represents a simulator session in capzlog.aero",
          "required": [
            "ExternalSystemUniqueID"
          ],
          "properties": {
            "ExternalSystemUniqueID": {
              "type": "string",
              "minLength": 1,
              "pattern": "^\\w{1-100}$"
            }
          }
        }
      ]
    },
    "SimulatorSessionOutputBase": {
      "type": "object",
      "description": "Represents a simulator session in capzlog.aero",
      "x-abstract": true,
      "required": [
        "Date",
        "SessionTime",
        "DayLandings",
        "NightLandings",
        "DayTakeoffs",
        "NightTakeoffs",
        "PilotFunction",
        "Status",
        "Landings",
        "Takeoffs",
        "SingleEngineTime",
        "MultiEngineTime",
        "TraineeTime",
        "SfiSfeTime"
      ],
      "properties": {
        "Date": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{4}\\-(0[1-9]|1[0-2])\\-(0[1-9]|[1-2][0-9]|3[0-1])$"
        },
        "SessionTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{1-5}:[0-5][0-9]$"
        },
        "DayLandings": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "maximum": 100.0,
          "minimum": 0.0
        },
        "NightLandings": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "maximum": 100.0,
          "minimum": 0.0
        },
        "DayTakeoffs": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "maximum": 100.0,
          "minimum": 0.0
        },
        "NightTakeoffs": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "maximum": 100.0,
          "minimum": 0.0
        },
        "PilotFunction": {
          "$ref": "#/definitions/PilotFunctions"
        },
        "Remark": {
          "type": "string"
        },
        "Markers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Marker"
          }
        },
        "Status": {
          "$ref": "#/definitions/UpdateStatus"
        },
        "Simulator": {
          "$ref": "#/definitions/SimulatorOutput"
        },
        "Landings": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "maximum": 100.0,
          "minimum": 0.0
        },
        "Takeoffs": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "maximum": 100.0,
          "minimum": 0.0
        },
        "SingleEngineTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{1-5}:[0-5][0-9]$"
        },
        "MultiEngineTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{1-5}:[0-5][0-9]$"
        },
        "TraineeTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{1-5}:[0-5][0-9]$"
        },
        "SfiSfeTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{1-5}:[0-5][0-9]$"
        }
      }
    },
    "PilotFunctions": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "PIC",
        "Copi",
        "Dual",
        "PICUS",
        "SPIC",
        "Trainee",
        "SyntheticFlightInstructor",
        "InstructorOnPilotSeat",
        "InstructorOnJumpSeat",
        "SupervisingInstructor",
        "Companion",
        "JumpSeat",
        "Other"
      ],
      "enum": [
        "PIC",
        "Copi",
        "Dual",
        "PICUS",
        "SPIC",
        "Trainee",
        "SyntheticFlightInstructor",
        "InstructorOnPilotSeat",
        "InstructorOnJumpSeat",
        "SupervisingInstructor",
        "Companion",
        "JumpSeat",
        "Other"
      ]
    },
    "Marker": {
      "type": "object",
      "required": [
        "Type"
      ],
      "properties": {
        "Type": {
          "$ref": "#/definitions/MarkerType"
        },
        "Value": {
          "type": "string",
          "description": "The content of this field depends on the marker type as follows:<ul><li><b>Custom:</b> this marker type is currently not supported</li><li><b>SkillTest:</b> one of the values ClassOrTypeRating, AircraftType, InstrumentRating, Other</li><li><b>ProficiencyCheck:</b> one of the values ClassOrTypeRating, AircraftType, InstrumentRating, Other</li><li><b>AssessmentOfCompetence:</b> null/nil (no value allowed)</li><li><b>OperatorProficiencyCheck:</b> one of the values ClassOrTypeRating, AircraftType, InstrumentRating, Other</li><li><b>OperatorLineCheck:</b> null/nil (no value allowed)</li><li><b>ExaminerFlight:</b> one of the values ClassOrTypeRating, AircraftType, InstrumentRating, Other</li><li><b>LanguageProficiencyCheck:</b> one of the values English, German, French, Italian, Russian, Other</li><li><b>RefresherTraining:</b> one of the values ClassOrTypeRating, AircraftType, InstrumentRating, Other</li><li><b>DemonstrationFlight:</b> null/nil (no value allowed)</li><li><b>TrainingFlight:</b> one of the values ClassOrTypeRating, AircraftType, InstrumentRating, Other</li><li><b>FamiliarizationFlight:</b> one of the values ClassOrTypeRating, AircraftType, Other</li><li><b>DifferenceTraining:</b> one of the values ClassOrTypeRating, AircraftType, Other</li><li><b>LineFlyingUnderSupervision:</b> null/nil (no value allowed)</li><li><b>LandingTraining:</b> null/nil (no value allowed)</li><li><b>ZeroFlightTimeTraining:</b> null/nil (no value allowed)</li><li><b>LaunchPrivilege:</b> one of the values Aerotow, Bungee, Car, Self, Winch</li><li><b>AerobaticPrivilege:</b> one of the values Basic, Advanced</li><li><b>CloudFlyingPrivilege:</b> null/nil (no value allowed)</li><li><b>CourseCompleted:</b> text matching the regular expression '^.+$'</li><li><b>AdditionalRatingTrainingCourse:</b> text matching the regular expression '^.+$'</li><li><b>InstructorTrainingCourse:</b> text matching the regular expression '^.+$'</li><li><b>DemonstrationTheAbilityToInstruct:</b> text matching the regular expression '^.+$'</li><li><b>WithStudent:</b> text matching the regular expression '^(?:.|\\n)+$'</li><li><b>WithInstructor:</b> text matching the regular expression '^(?:.|\\n)+$'</li><li><b>WithExaminer:</b> text matching the regular expression '^(?:.|\\n)+$'</li><li><b>Lesson:</b> text matching the regular expression '^(?:.|\\n)+$'</li><li><b>EitherSeatQualification:</b> null/nil (no value allowed)</li><li><b>RecurrentMountainPaxCheckHelicopter:</b> null/nil (no value allowed)</li><li><b>LOFT:</b> null/nil (no value allowed)</li><li><b>OperatorProficiencyTraining:</b> null/nil (no value allowed)</li><li><b>TrainingPhase:</b> one of the values PPL, NIT, CPL_SEP, EXPB, UPRT, CPL_MEP, MEP_IR, MCC</li><li><b>Solo:</b> null/nil (no value allowed)</li><li><b>CrossCountry:</b> null/nil (no value allowed)</li><li><b>SeaTakeoff:</b> a positive number representing the takeoffs for the marker. The value must be less than or equal to the total number of takeoffs</li><li><b>SeaLanding:</b> a positive number representing the landings for the marker. The value must be less than or equal to the total number of landings</li><li><b>SeriesOfFlights:</b> a duration of time in format hh:mm (<i>\":\" is required</i>) or a positive number representing the reduced flight time in <i>minutes</i>. The value must be less than the time calculated based on the departure/off block and arrival/on block times</li><li><b>ReducedTimeOnControls:</b> a duration of time in format hh:mm (<i>\":\" is required</i>) or a positive number representing the reduced flight time in <i>minutes</i>. The value must be less than the time calculated based on the departure/off block and arrival/on block times</li><li><b>SailplaneTowing:</b> null/nil (no value allowed)</li><li><b>BannerTowing:</b> null/nil (no value allowed)</li><li><b>Aerobatic:</b> null/nil (no value allowed)</li><li><b>SelfSustainable:</b> null/nil (no value allowed)</li><li><b>CloudFlying:</b> null/nil (no value allowed)</li><li><b>TetheredFlight:</b> null/nil (no value allowed)</li><li><b>NightVisionImagingSystem:</b> null/nil (no value allowed)</li><li><b>FlightTest:</b> one of the values Cat1, Cat2</li><li><b>Paradropping:</b> null/nil (no value allowed)</li><li><b>LowVisibilityTakeoff:</b> null/nil (no value allowed)</li><li><b>ApproachType:</b> one of the values Visual, Circling, ILS_CAT_I, ILS_CAT_II, ILS_CAT_IIIA, ILS_CAT_IIIB, ILS_CAT_IIIC, LOC, LOC_DME, VOR, VOR_DME, NDB, RNP, RNP_AR, LPV, LP, LNAV_VNAV, LNAV, GLS</li><li><b>LowVisibilityLandingAirplane:</b> one of the values CAT_I_Autoland, CAT_I_SimulatedAutoland, CAT_II_ManualLand, CAT_II_Autoland, CAT_II_Simulated, CAT_II_SimulatedAutoland, CAT_IIIA_Simulated, CAT_IIIA_Autoland, CAT_IIIA_SimulatedAutoland, CAT_IIIB_Autoland, CAT_IIIB_Simulated, CAT_IIIB_SimulatedAutoland, CAT_IIIC_Autoland, CAT_IIIC_Simulated, CAT_IIIC_SimulatedAutoland</li><li><b>HelicopterDepartureInFog:</b> null/nil (no value allowed)</li><li><b>MountainTakeoff:</b> one of the values Skis, Wheels</li><li><b>MountainTakeoffHelicopter:</b> a positive number representing the takeoffs for the marker. The value must be less than or equal to the total number of takeoffs</li><li><b>MountainLanding:</b> one of the values Skis, Wheels</li><li><b>MountainLandingHelicopter:</b> a positive number representing the landings for the marker. The value must be less than or equal to the total number of landings</li><li><b>MountainLandingOfficialSiteHelicopter:</b> a positive number representing the landings for the marker. The value must be less than or equal to the total number of landings</li><li><b>MountainLandingAbove2000mHelicopter:</b> a positive number representing the landings for the marker. The value must be less than or equal to the total number of landings</li><li><b>MountainLandingAbove2700mHelicopter:</b> a positive number representing the landings for the marker. The value must be less than or equal to the total number of landings</li><li><b>TakeoffRunway:</b> text matching the regular expression '^(?:0[1-9]|[1-2][0-9]|3[0-6])[LRC]?$'</li><li><b>LandingRunway:</b> text matching the regular expression '^(?:0[1-9]|[1-2][0-9]|3[0-6])[LRC]?$'</li><li><b>HoldingPattern:</b> a positive number</li><li><b>GoAround:</b> a positive number</li><li><b>RunwaySwingOver:</b> null/nil (no value allowed)</li><li><b>SteepApproach:</b> null/nil (no value allowed)</li><li><b>GlacierLanding:</b> a positive number representing the landings for the marker. The value must be less than or equal to the total number of landings</li><li><b>TouchAndGo:</b> a positive number representing the landings for the marker. The value must be less than or equal to the total number of landings</li><li><b>EVS:</b> null/nil (no value allowed)</li><li><b>HESLO1:</b> a positive number</li><li><b>HESLO2:</b> a positive number</li><li><b>HESLO3:</b> a positive number</li><li><b>HESLO4:</b> a positive number</li><li><b>HEC1:</b> a positive number</li><li><b>HEC2:</b> a positive number</li><li><b>HHO:</b> a positive number</li><li><b>ReliefPilot:</b> a duration of time in format hh:mm (<i>\":\" is required</i>) or a positive number representing the reduced flight time in <i>minutes</i>. The value must be less than the time calculated based on the departure/off block and arrival/on block times</li><li><b>Examiner:</b> null/nil (no value allowed)</li><li><b>LanguageAssessor:</b> null/nil (no value allowed)</li><li><b>PilotRole:</b> one of the values PilotFlying, PilotMonitoring</li><li><b>WithMate:</b> text matching the regular expression '^.+$'</li><li><b>WithPassengers:</b> text matching the regular expression '^(?:.|\\n)+$'</li><li><b>NumberOfPassengers:</b> a positive number</li><li><b>CargoWeight:</b> a positive number</li><li><b>FlightNumber:</b> text matching the regular expression '^.+$'</li><li><b>Crew:</b> text matching the regular expression '^(?:.|\\n)+$'</li><li><b>BirdStrike:</b> null/nil (no value allowed)</li></ul>"
        }
      }
    },
    "MarkerType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Custom",
        "SkillTest",
        "ProficiencyCheck",
        "AssessmentOfCompetence",
        "OperatorProficiencyCheck",
        "OperatorLineCheck",
        "ExaminerFlight",
        "LanguageProficiencyCheck",
        "RefresherTraining",
        "DemonstrationFlight",
        "TrainingFlight",
        "FamiliarizationFlight",
        "DifferenceTraining",
        "LineFlyingUnderSupervision",
        "LandingTraining",
        "ZeroFlightTimeTraining",
        "LaunchPrivilege",
        "AerobaticPrivilege",
        "CloudFlyingPrivilege",
        "CourseCompleted",
        "AdditionalRatingTrainingCourse",
        "InstructorTrainingCourse",
        "DemonstrationTheAbilityToInstruct",
        "WithStudent",
        "WithInstructor",
        "WithExaminer",
        "Lesson",
        "EitherSeatQualification",
        "RecurrentMountainPaxCheckHelicopter",
        "LOFT",
        "OperatorProficiencyTraining",
        "TrainingPhase",
        "Solo",
        "CrossCountry",
        "SeaTakeoff",
        "SeaLanding",
        "SeriesOfFlights",
        "ReducedTimeOnControls",
        "SailplaneTowing",
        "BannerTowing",
        "Aerobatic",
        "SelfSustainable",
        "CloudFlying",
        "TetheredFlight",
        "NightVisionImagingSystem",
        "FlightTest",
        "Paradropping",
        "LowVisibilityTakeoff",
        "ApproachType",
        "LowVisibilityLandingAirplane",
        "HelicopterDepartureInFog",
        "MountainTakeoff",
        "MountainTakeoffHelicopter",
        "MountainLanding",
        "MountainLandingHelicopter",
        "MountainLandingOfficialSiteHelicopter",
        "MountainLandingAbove2000mHelicopter",
        "MountainLandingAbove2700mHelicopter",
        "TakeoffRunway",
        "LandingRunway",
        "HoldingPattern",
        "GoAround",
        "RunwaySwingOver",
        "SteepApproach",
        "GlacierLanding",
        "TouchAndGo",
        "EVS",
        "HESLO1",
        "HESLO2",
        "HESLO3",
        "HESLO4",
        "HEC1",
        "HEC2",
        "HHO",
        "ReliefPilot",
        "Examiner",
        "LanguageAssessor",
        "PilotRole",
        "WithMate",
        "WithPassengers",
        "NumberOfPassengers",
        "CargoWeight",
        "FlightNumber",
        "Crew",
        "BirdStrike"
      ],
      "enum": [
        "Custom",
        "SkillTest",
        "ProficiencyCheck",
        "AssessmentOfCompetence",
        "OperatorProficiencyCheck",
        "OperatorLineCheck",
        "ExaminerFlight",
        "LanguageProficiencyCheck",
        "RefresherTraining",
        "DemonstrationFlight",
        "TrainingFlight",
        "FamiliarizationFlight",
        "DifferenceTraining",
        "LineFlyingUnderSupervision",
        "LandingTraining",
        "ZeroFlightTimeTraining",
        "LaunchPrivilege",
        "AerobaticPrivilege",
        "CloudFlyingPrivilege",
        "CourseCompleted",
        "AdditionalRatingTrainingCourse",
        "InstructorTrainingCourse",
        "DemonstrationTheAbilityToInstruct",
        "WithStudent",
        "WithInstructor",
        "WithExaminer",
        "Lesson",
        "EitherSeatQualification",
        "RecurrentMountainPaxCheckHelicopter",
        "LOFT",
        "OperatorProficiencyTraining",
        "TrainingPhase",
        "Solo",
        "CrossCountry",
        "SeaTakeoff",
        "SeaLanding",
        "SeriesOfFlights",
        "ReducedTimeOnControls",
        "SailplaneTowing",
        "BannerTowing",
        "Aerobatic",
        "SelfSustainable",
        "CloudFlying",
        "TetheredFlight",
        "NightVisionImagingSystem",
        "FlightTest",
        "Paradropping",
        "LowVisibilityTakeoff",
        "ApproachType",
        "LowVisibilityLandingAirplane",
        "HelicopterDepartureInFog",
        "MountainTakeoff",
        "MountainTakeoffHelicopter",
        "MountainLanding",
        "MountainLandingHelicopter",
        "MountainLandingOfficialSiteHelicopter",
        "MountainLandingAbove2000mHelicopter",
        "MountainLandingAbove2700mHelicopter",
        "TakeoffRunway",
        "LandingRunway",
        "HoldingPattern",
        "GoAround",
        "RunwaySwingOver",
        "SteepApproach",
        "GlacierLanding",
        "TouchAndGo",
        "EVS",
        "HESLO1",
        "HESLO2",
        "HESLO3",
        "HESLO4",
        "HEC1",
        "HEC2",
        "HHO",
        "ReliefPilot",
        "Examiner",
        "LanguageAssessor",
        "PilotRole",
        "WithMate",
        "WithPassengers",
        "NumberOfPassengers",
        "CargoWeight",
        "FlightNumber",
        "Crew",
        "BirdStrike"
      ]
    },
    "UpdateStatus": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Success",
        "ModifiedByUser",
        "DeletedByUser"
      ],
      "enum": [
        "Success",
        "ModifiedByUser",
        "DeletedByUser"
      ]
    },
    "SimulatorOutput": {
      "type": "object",
      "required": [
        "AuthorizationNumber",
        "ICAODesignator"
      ],
      "properties": {
        "AuthorizationNumber": {
          "type": "string",
          "minLength": 1
        },
        "Variant": {
          "type": "string",
          "description": "The variant of the simulator, in case several variants are available for the provided registration in capzlog.aero. If no variant is specified and there are multiple variants for the provided registration in capzlog.aero, one is selected randomly"
        },
        "FlightSimulationTrainingDeviceType": {
          "$ref": "#/definitions/FlightSimulationTrainingDeviceTypes"
        },
        "ICAODesignator": {
          "type": "string",
          "minLength": 1
        },
        "Level": {
          "type": "string"
        }
      }
    },
    "FlightSimulationTrainingDeviceTypes": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "FFS_A",
        "FFS_B",
        "FFS_C",
        "FFS_D",
        "FTD_1",
        "FTD_2",
        "FTD_3",
        "FNPT_I",
        "FNPT_II",
        "FNPT_III",
        "OTD",
        "FS",
        "BITD",
        "BATD",
        "AATD",
        "InitialValues",
        "Uncertified"
      ],
      "enum": [
        "FFS_A",
        "FFS_B",
        "FFS_C",
        "FFS_D",
        "FTD_1",
        "FTD_2",
        "FTD_3",
        "FNPT_I",
        "FNPT_II",
        "FNPT_III",
        "OTD",
        "FS",
        "BITD",
        "BATD",
        "AATD",
        "InitialValues",
        "Uncertified"
      ]
    },
    "ExternalSystemSimulatorSessionInput": {
      "allOf": [
        {
          "$ref": "#/definitions/SimulatorSessionInputBase"
        },
        {
          "type": "object",
          "description": "Represents a SimulatorSession to be created in capzlog.aero",
          "required": [
            "ExternalSystemUniqueID"
          ],
          "properties": {
            "ExternalSystemUniqueID": {
              "type": "string",
              "minLength": 1,
              "pattern": "^\\w{1-100}$"
            }
          }
        }
      ]
    },
    "SimulatorSessionInputBase": {
      "type": "object",
      "description": "Represents a SimulatorSession to be created in capzlog.aero",
      "x-abstract": true,
      "required": [
        "Date",
        "SessionTime",
        "DayLandings",
        "NightLandings",
        "DayTakeoffs",
        "NightTakeoffs",
        "PilotFunction"
      ],
      "properties": {
        "Date": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{4}\\-(0[1-9]|1[0-2])\\-(0[1-9]|[1-2][0-9]|3[0-1])$"
        },
        "SessionTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{1-5}:[0-5][0-9]$"
        },
        "DayLandings": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "maximum": 100.0,
          "minimum": 0.0
        },
        "NightLandings": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "maximum": 100.0,
          "minimum": 0.0
        },
        "DayTakeoffs": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "maximum": 100.0,
          "minimum": 0.0
        },
        "NightTakeoffs": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "maximum": 100.0,
          "minimum": 0.0
        },
        "PilotFunction": {
          "$ref": "#/definitions/PilotFunctions"
        },
        "Remark": {
          "type": "string"
        },
        "Markers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Marker"
          }
        },
        "Simulator": {
          "$ref": "#/definitions/SimulatorInput"
        }
      }
    },
    "SimulatorInput": {
      "type": "object",
      "required": [
        "AuthorizationNumber"
      ],
      "properties": {
        "AuthorizationNumber": {
          "type": "string",
          "minLength": 1
        },
        "Variant": {
          "type": "string",
          "description": "The variant of the simulator, in case several variants are available for the provided registration in capzlog.aero. If no variant is specified and there are multiple variants for the provided registration in capzlog.aero, one is selected randomly"
        },
        "FlightSimulationTrainingDeviceType": {
          "$ref": "#/definitions/FlightSimulationTrainingDeviceTypes"
        },
        "ICAODesignator": {
          "type": "string",
          "description": "Required for new/non-existing simulators"
        }
      }
    },
    "ExternalSystemSailplaneFlightOutput": {
      "allOf": [
        {
          "$ref": "#/definitions/SailplaneFlightOutputBase"
        },
        {
          "type": "object",
          "description": "Represents a sailplane flight in capzlog.aero",
          "required": [
            "ExternalSystemUniqueID"
          ],
          "properties": {
            "ExternalSystemUniqueID": {
              "type": "string",
              "minLength": 1,
              "pattern": "^\\w{1-100}$"
            }
          }
        }
      ]
    },
    "SailplaneFlightOutputBase": {
      "type": "object",
      "description": "Represents a sailplane flight in capzlog.aero",
      "x-abstract": true,
      "required": [
        "Date",
        "AreTimesLocal",
        "TakeoffTime",
        "LandingTime",
        "PICName",
        "NightTakeoffs",
        "NightLandings",
        "LaunchMethod",
        "IsTouringMotorGlider",
        "PilotFunction",
        "Status",
        "DepartureAirport",
        "ArrivalAirport",
        "DayNightSequence",
        "DayTakeoffs",
        "DayLandings",
        "FlightTime",
        "PICTime",
        "DualTime",
        "InstructorTime",
        "DayTime",
        "NightTime",
        "TmgTime"
      ],
      "properties": {
        "Date": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{4}\\-(0[1-9]|1[0-2])\\-(0[1-9]|[1-2][0-9]|3[0-1])$"
        },
        "AreTimesLocal": {
          "type": "boolean",
          "default": false
        },
        "TakeoffTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"
        },
        "LandingTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"
        },
        "PICName": {
          "type": "string",
          "minLength": 1
        },
        "NightTakeoffs": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "maximum": 100.0,
          "minimum": 0.0
        },
        "NightLandings": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "maximum": 100.0,
          "minimum": 0.0
        },
        "MorningTwilightTime": {
          "type": "string",
          "description": "Only flights in the TMG category can have night time and thus also twilight times",
          "pattern": "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"
        },
        "EveningTwilightTime": {
          "type": "string",
          "description": "Only flights in the TMG category can have night time and thus also twilight times",
          "pattern": "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"
        },
        "LaunchMethod": {
          "$ref": "#/definitions/LaunchMethods"
        },
        "IsTouringMotorGlider": {
          "type": "boolean",
          "description": "Identifies if a powered sailplane was flown as TMG. Only flights with powered sailplanes may have this flag set to true"
        },
        "PilotFunction": {
          "$ref": "#/definitions/PilotFunctions"
        },
        "Remark": {
          "type": "string"
        },
        "Markers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Marker"
          }
        },
        "Status": {
          "$ref": "#/definitions/UpdateStatus"
        },
        "DepartureAirport": {
          "$ref": "#/definitions/AirportOutput"
        },
        "ArrivalAirport": {
          "$ref": "#/definitions/AirportOutput"
        },
        "Aircraft": {
          "$ref": "#/definitions/SailplaneOutput"
        },
        "DayNightSequence": {
          "description": "Only flights in the TMG category can have night time and thus also day/night sequence different than day",
          "allOf": [
            {
              "$ref": "#/definitions/DayNightSequences"
            }
          ]
        },
        "DayTakeoffs": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "maximum": 100.0,
          "minimum": 0.0
        },
        "DayLandings": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "maximum": 100.0,
          "minimum": 0.0
        },
        "FlightTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{1-5}:[0-5][0-9]$"
        },
        "PICTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{1-5}:[0-5][0-9]$"
        },
        "DualTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{1-5}:[0-5][0-9]$"
        },
        "InstructorTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{1-5}:[0-5][0-9]$"
        },
        "DayTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{1-5}:[0-5][0-9]$"
        },
        "NightTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{1-5}:[0-5][0-9]$"
        },
        "TmgTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{1-5}:[0-5][0-9]$"
        }
      }
    },
    "LaunchMethods": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "None",
        "Aerotow",
        "Winch",
        "Car",
        "Self",
        "Bungee"
      ],
      "enum": [
        "None",
        "Aerotow",
        "Winch",
        "Car",
        "Self",
        "Bungee"
      ]
    },
    "AirportOutput": {
      "type": "object",
      "required": [
        "ICAOCode"
      ],
      "properties": {
        "ICAOCode": {
          "type": "string",
          "minLength": 1
        },
        "FreeText": {
          "type": "string",
          "description": "A free text name of the airport or landing location. Shall only be used if the ICAO code is a no location indicator ZZZZ or abXX where ab is the country prefix, e.g. LSXX for no location indicator in Switzerland"
        }
      }
    },
    "SailplaneOutput": {
      "type": "object",
      "required": [
        "Registration",
        "ICAODesignator",
        "IsPoweredSailplane"
      ],
      "properties": {
        "Registration": {
          "type": "string",
          "minLength": 1
        },
        "Variant": {
          "type": "string",
          "description": "The variant of the aircraft, in case several variants are available for the provided registration in capzlog.aero. If no variant is specified and there are multiple variants for the provided registration in capzlog.aero, one is selected randomly"
        },
        "ICAODesignator": {
          "type": "string",
          "minLength": 1
        },
        "IsPoweredSailplane": {
          "type": "boolean"
        }
      }
    },
    "DayNightSequences": {
      "type": "string",
      "description": "",
      "x-enumFlags": true,
      "x-enumNames": [
        "Day",
        "Night",
        "DayNight",
        "NightDay",
        "DayNightDay",
        "NightDayNight"
      ],
      "enum": [
        "Day",
        "Night",
        "DayNight",
        "NightDay",
        "DayNightDay",
        "NightDayNight"
      ]
    },
    "ExternalSystemSailplaneFlightInput": {
      "allOf": [
        {
          "$ref": "#/definitions/SailplaneFlightInputBase"
        },
        {
          "type": "object",
          "description": "Represents a sailplane flight to be created in capzlog.aero",
          "required": [
            "ExternalSystemUniqueID",
            "IsLastFlightOfDay"
          ],
          "properties": {
            "ExternalSystemUniqueID": {
              "type": "string",
              "minLength": 1,
              "pattern": "^\\w{1-100}$"
            },
            "IsLastFlightOfDay": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "SailplaneFlightInputBase": {
      "type": "object",
      "description": "Represents a sailplane flight to be created in capzlog.aero",
      "x-abstract": true,
      "required": [
        "Date",
        "AreTimesLocal",
        "TakeoffTime",
        "LandingTime",
        "PICName",
        "NightTakeoffs",
        "NightLandings",
        "LaunchMethod",
        "IsTouringMotorGlider",
        "PilotFunction",
        "DepartureAirport",
        "ArrivalAirport",
        "AutoCalculateDayNightTime",
        "Takeoffs",
        "Landings"
      ],
      "properties": {
        "Date": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{4}\\-(0[1-9]|1[0-2])\\-(0[1-9]|[1-2][0-9]|3[0-1])$"
        },
        "AreTimesLocal": {
          "type": "boolean",
          "default": false
        },
        "TakeoffTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"
        },
        "LandingTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"
        },
        "PICName": {
          "type": "string",
          "minLength": 1
        },
        "NightTakeoffs": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "maximum": 100.0,
          "minimum": 0.0
        },
        "NightLandings": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "maximum": 100.0,
          "minimum": 0.0
        },
        "MorningTwilightTime": {
          "type": "string",
          "description": "Only flights in the TMG category can have night time and thus also twilight times",
          "pattern": "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"
        },
        "EveningTwilightTime": {
          "type": "string",
          "description": "Only flights in the TMG category can have night time and thus also twilight times",
          "pattern": "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"
        },
        "LaunchMethod": {
          "$ref": "#/definitions/LaunchMethods"
        },
        "IsTouringMotorGlider": {
          "type": "boolean",
          "description": "Identifies if a powered sailplane was flown as TMG. Only flights with powered sailplanes may have this flag set to true"
        },
        "PilotFunction": {
          "$ref": "#/definitions/PilotFunctions"
        },
        "Remark": {
          "type": "string"
        },
        "Markers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Marker"
          }
        },
        "DepartureAirport": {
          "$ref": "#/definitions/AirportInput"
        },
        "ArrivalAirport": {
          "$ref": "#/definitions/AirportInput"
        },
        "Aircraft": {
          "$ref": "#/definitions/SailplaneInput"
        },
        "AutoCalculateDayNightTime": {
          "type": "boolean",
          "description": "If set to true, the day/night limits are calculated by capzlog.aero; no twilight values should be provided; works only with UTC times or in CET time zone. If set to false, the day/night limits should be provided as twilight values; if none are provided, the SailplaneFlight is considered day.",
          "default": true
        },
        "DayNightSequence": {
          "description": "The day/night sequence of the SailplaneFlight. Required if AutoCalculateDayNightTime is false",
          "allOf": [
            {
              "$ref": "#/definitions/DayNightSequences"
            }
          ]
        },
        "Takeoffs": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "maximum": 100.0,
          "minimum": 0.0
        },
        "Landings": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "maximum": 100.0,
          "minimum": 0.0
        }
      }
    },
    "AirportInput": {
      "type": "object",
      "required": [
        "ICAOCode"
      ],
      "properties": {
        "ICAOCode": {
          "type": "string",
          "minLength": 1
        },
        "FreeText": {
          "type": "string",
          "description": "A free text name of the airport or landing location. Shall only be used if the ICAO code is a no location indicator ZZZZ or abXX where ab is the country prefix, e.g. LSXX for no location indicator in Switzerland"
        },
        "CountryAlpha2": {
          "type": "string",
          "description": "The country ISO 3166 alpha 2 code. Required for new/non-existing airports. Ignored for existing airports"
        },
        "Name": {
          "type": "string",
          "description": "Required for new/non-existing airports. Ignored for existing airports"
        },
        "City": {
          "type": "string"
        },
        "Latitude": {
          "type": "number",
          "description": "The latitude in decimal degree (DD) format. Value between -90 and +90. Required for new/non-existing airports. Ignored for existing airports",
          "format": "decimal"
        },
        "Longitude": {
          "type": "number",
          "description": "The longitude in decimal degree (DD) format. Value between -180 and +180. Required for new/non-existing airports. Ignored for existing airports",
          "format": "decimal"
        },
        "AltitudeInFeet": {
          "type": "integer",
          "format": "int32"
        },
        "UTCOffset": {
          "type": "number",
          "description": "The UTC offset in hours. Partial hours, e.g. -1h15m, are represented as decimal numbers, e.g. -1.25. Required for new/non-existing airports. Ignored for existing airports",
          "format": "decimal"
        },
        "DST": {
          "type": "string",
          "description": "The type of Daylight Saving Time observed. Required for new/non-existing airports. Ignored for existing airports",
          "enum": [
            "Unknown",
            "Europe",
            "NorthAmerica",
            "SouthAmerica",
            "Australia",
            "NewZealand",
            "None"
          ]
        }
      }
    },
    "SailplaneInput": {
      "type": "object",
      "required": [
        "Registration"
      ],
      "properties": {
        "Registration": {
          "type": "string",
          "minLength": 1
        },
        "Variant": {
          "type": "string",
          "description": "The variant of the aircraft, in case several variants are available for the provided registration in capzlog.aero. If no variant is specified and there are multiple variants for the provided registration in capzlog.aero, one is selected randomly"
        },
        "ICAODesignator": {
          "type": "string",
          "description": "Required for new/non-existing sailplanes"
        }
      }
    },
    "ExternalSystemBalloonFlightOutput": {
      "allOf": [
        {
          "$ref": "#/definitions/BalloonFlightOutputBase"
        },
        {
          "type": "object",
          "description": "Represents a balloon flight in capzlog.aero",
          "required": [
            "ExternalSystemUniqueID"
          ],
          "properties": {
            "ExternalSystemUniqueID": {
              "type": "string",
              "minLength": 1,
              "pattern": "^\\w{1-100}$"
            }
          }
        }
      ]
    },
    "BalloonFlightOutputBase": {
      "type": "object",
      "description": "Represents a balloon flight in capzlog.aero",
      "x-abstract": true,
      "required": [
        "Date",
        "Departure",
        "Arrival",
        "AreTimesLocal",
        "TakeoffTime",
        "LandingTime",
        "PICName",
        "NightTakeoffs",
        "NightLandings",
        "DayNightSequence",
        "PilotFunction",
        "Status",
        "DayTakeoffs",
        "DayLandings",
        "FlightTime",
        "PICTime",
        "DualTime",
        "InstructorTime",
        "DayTime",
        "NightTime",
        "GroupATime",
        "GroupBTime",
        "GroupCTime",
        "GroupDTime",
        "GasTime"
      ],
      "properties": {
        "Date": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{4}\\-(0[1-9]|1[0-2])\\-(0[1-9]|[1-2][0-9]|3[0-1])$"
        },
        "Departure": {
          "type": "string",
          "minLength": 1
        },
        "Arrival": {
          "type": "string",
          "minLength": 1
        },
        "AreTimesLocal": {
          "type": "boolean",
          "default": false
        },
        "TakeoffTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"
        },
        "LandingTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"
        },
        "PICName": {
          "type": "string",
          "minLength": 1
        },
        "NightTakeoffs": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "maximum": 100.0,
          "minimum": 0.0
        },
        "NightLandings": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "maximum": 100.0,
          "minimum": 0.0
        },
        "DayNightSequence": {
          "description": "The day/night sequence of the BalloonFlight",
          "allOf": [
            {
              "$ref": "#/definitions/DayNightSequences"
            }
          ]
        },
        "MorningTwilightTime": {
          "type": "string",
          "pattern": "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"
        },
        "EveningTwilightTime": {
          "type": "string",
          "pattern": "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"
        },
        "PilotFunction": {
          "$ref": "#/definitions/PilotFunctions"
        },
        "Inflations": {
          "type": "integer",
          "format": "int32"
        },
        "NumberOfPassengers": {
          "type": "integer",
          "format": "int32"
        },
        "DistanceInKilometers": {
          "type": "integer",
          "format": "int32"
        },
        "Remark": {
          "type": "string"
        },
        "Markers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Marker"
          }
        },
        "Status": {
          "$ref": "#/definitions/UpdateStatus"
        },
        "Aircraft": {
          "$ref": "#/definitions/BalloonOutput"
        },
        "DayTakeoffs": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "maximum": 100.0,
          "minimum": 0.0
        },
        "DayLandings": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "maximum": 100.0,
          "minimum": 0.0
        },
        "FlightTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{1-5}:[0-5][0-9]$"
        },
        "PICTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{1-5}:[0-5][0-9]$"
        },
        "DualTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{1-5}:[0-5][0-9]$"
        },
        "InstructorTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{1-5}:[0-5][0-9]$"
        },
        "DayTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{1-5}:[0-5][0-9]$"
        },
        "NightTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{1-5}:[0-5][0-9]$"
        },
        "GroupATime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{1-5}:[0-5][0-9]$"
        },
        "GroupBTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{1-5}:[0-5][0-9]$"
        },
        "GroupCTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{1-5}:[0-5][0-9]$"
        },
        "GroupDTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{1-5}:[0-5][0-9]$"
        },
        "GasTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{1-5}:[0-5][0-9]$"
        }
      }
    },
    "BalloonOutput": {
      "type": "object",
      "required": [
        "Registration",
        "ICAODesignator"
      ],
      "properties": {
        "Registration": {
          "type": "string",
          "minLength": 1
        },
        "Variant": {
          "type": "string",
          "description": "The variant of the aircraft, in case several variants are available for the provided registration in capzlog.aero. If no variant is specified and there are multiple variants for the provided registration in capzlog.aero, one is selected randomly"
        },
        "ICAODesignator": {
          "type": "string",
          "minLength": 1
        },
        "BalloonGroup": {
          "$ref": "#/definitions/BalloonGroups"
        }
      }
    },
    "BalloonGroups": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "GroupA",
        "GroupB",
        "GroupC",
        "GroupD",
        "Gas"
      ],
      "enum": [
        "GroupA",
        "GroupB",
        "GroupC",
        "GroupD",
        "Gas"
      ]
    },
    "ExternalSystemBalloonFlightInput": {
      "allOf": [
        {
          "$ref": "#/definitions/BalloonFlightInputBase"
        },
        {
          "type": "object",
          "description": "Represents a balloon flight to be created in capzlog.aero",
          "required": [
            "ExternalSystemUniqueID",
            "IsLastFlightOfDay"
          ],
          "properties": {
            "ExternalSystemUniqueID": {
              "type": "string",
              "minLength": 1,
              "pattern": "^\\w{1-100}$"
            },
            "IsLastFlightOfDay": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "BalloonFlightInputBase": {
      "type": "object",
      "description": "Represents a balloon flight to be created in capzlog.aero",
      "x-abstract": true,
      "required": [
        "Date",
        "Departure",
        "Arrival",
        "AreTimesLocal",
        "TakeoffTime",
        "LandingTime",
        "PICName",
        "NightTakeoffs",
        "NightLandings",
        "DayNightSequence",
        "PilotFunction",
        "Takeoffs",
        "Landings"
      ],
      "properties": {
        "Date": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{4}\\-(0[1-9]|1[0-2])\\-(0[1-9]|[1-2][0-9]|3[0-1])$"
        },
        "Departure": {
          "type": "string",
          "minLength": 1
        },
        "Arrival": {
          "type": "string",
          "minLength": 1
        },
        "AreTimesLocal": {
          "type": "boolean",
          "default": false
        },
        "TakeoffTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"
        },
        "LandingTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"
        },
        "PICName": {
          "type": "string",
          "minLength": 1
        },
        "NightTakeoffs": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "maximum": 100.0,
          "minimum": 0.0
        },
        "NightLandings": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "maximum": 100.0,
          "minimum": 0.0
        },
        "DayNightSequence": {
          "description": "The day/night sequence of the BalloonFlight",
          "allOf": [
            {
              "$ref": "#/definitions/DayNightSequences"
            }
          ]
        },
        "MorningTwilightTime": {
          "type": "string",
          "pattern": "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"
        },
        "EveningTwilightTime": {
          "type": "string",
          "pattern": "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"
        },
        "PilotFunction": {
          "$ref": "#/definitions/PilotFunctions"
        },
        "Inflations": {
          "type": "integer",
          "format": "int32"
        },
        "NumberOfPassengers": {
          "type": "integer",
          "format": "int32"
        },
        "DistanceInKilometers": {
          "type": "integer",
          "format": "int32"
        },
        "Remark": {
          "type": "string"
        },
        "Markers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Marker"
          }
        },
        "Aircraft": {
          "$ref": "#/definitions/BalloonInput"
        },
        "Takeoffs": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "maximum": 100.0,
          "minimum": 0.0
        },
        "Landings": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "maximum": 100.0,
          "minimum": 0.0
        }
      }
    },
    "BalloonInput": {
      "type": "object",
      "required": [
        "Registration"
      ],
      "properties": {
        "Registration": {
          "type": "string",
          "minLength": 1
        },
        "Variant": {
          "type": "string",
          "description": "The variant of the aircraft, in case several variants are available for the provided registration in capzlog.aero. If no variant is specified and there are multiple variants for the provided registration in capzlog.aero, one is selected randomly"
        },
        "ICAODesignator": {
          "type": "string",
          "description": "Required for new/non-existing balloons"
        }
      }
    },
    "ExternalSystemFlightOutput": {
      "allOf": [
        {
          "$ref": "#/definitions/FlightOutputBase"
        },
        {
          "type": "object",
          "description": "Represents a flight in capzlog.aero",
          "required": [
            "ExternalSystemUniqueID"
          ],
          "properties": {
            "ExternalSystemUniqueID": {
              "type": "string",
              "minLength": 1,
              "pattern": "^\\w{1-100}$"
            }
          }
        }
      ]
    },
    "FlightOutputBase": {
      "type": "object",
      "description": "Represents a flight in capzlog.aero",
      "x-abstract": true,
      "required": [
        "Date",
        "AreTimesLocal",
        "OffBlockTime",
        "OnBlockTime",
        "PICName",
        "NightTakeoffs",
        "NightLandings",
        "IFRDepartures",
        "IFRApproaches",
        "TypeOfFlight",
        "PilotFunction",
        "Status",
        "DepartureAirport",
        "ArrivalAirport",
        "DayNightSequence",
        "DayTakeoffs",
        "DayLandings",
        "FlightTime",
        "AirborneTime",
        "SinglePilotSingleEngineTime",
        "SinglePilotMultiEngineTime",
        "MultiPilotTime",
        "PICTime",
        "DualTime",
        "CopiTime",
        "InstructorTime",
        "VFRTime",
        "IFRTime",
        "DayTime",
        "NightTime"
      ],
      "properties": {
        "Date": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{4}\\-(0[1-9]|1[0-2])\\-(0[1-9]|[1-2][0-9]|3[0-1])$"
        },
        "AreTimesLocal": {
          "type": "boolean",
          "default": false
        },
        "OffBlockTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"
        },
        "OnBlockTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"
        },
        "TakeoffTime": {
          "type": "string",
          "pattern": "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"
        },
        "LandingTime": {
          "type": "string",
          "pattern": "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"
        },
        "PICName": {
          "type": "string",
          "minLength": 1
        },
        "NightTakeoffs": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "maximum": 100.0,
          "minimum": 0.0
        },
        "NightLandings": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "maximum": 100.0,
          "minimum": 0.0
        },
        "IFRDepartures": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "maximum": 100.0,
          "minimum": 0.0
        },
        "IFRApproaches": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "maximum": 100.0,
          "minimum": 0.0
        },
        "MorningTwilightTime": {
          "type": "string",
          "pattern": "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"
        },
        "EveningTwilightTime": {
          "type": "string",
          "pattern": "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"
        },
        "TypeOfFlight": {
          "$ref": "#/definitions/FlightTypes"
        },
        "ChangeVFRToIFRTime": {
          "type": "string",
          "pattern": "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"
        },
        "ChangeIFRToVFRTime": {
          "type": "string",
          "pattern": "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"
        },
        "PilotFunction": {
          "$ref": "#/definitions/PilotFunctions"
        },
        "Remark": {
          "type": "string"
        },
        "AircraftCounterStart": {
          "type": "string",
          "description": "The start value of the aircraft counter. If provided, AircraftCounterEnd must also be provided. The time between AircraftCounterStart and AircraftCounterEnd must be less than the flight time and equal to the airborne time if it is provided",
          "pattern": "^\\d{1-5}:[0-5][0-9]$"
        },
        "AircraftCounterEnd": {
          "type": "string",
          "description": "The end value of the aircraft counter. If provided, AircraftCounterStart must also be provided. The time between AircraftCounterStart and AircraftCounterEnd must be less than the flight time and equal to the airborne time if it is provided",
          "pattern": "^\\d{1-5}:[0-5][0-9]$"
        },
        "IsMultiPilot": {
          "type": "boolean",
          "description": "Used to specify if the flight is single pilot or multi pilot operation. Considered only for aircraft that can be flown both single and multi pilot"
        },
        "Markers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Marker"
          }
        },
        "Status": {
          "$ref": "#/definitions/UpdateStatus"
        },
        "DepartureAirport": {
          "$ref": "#/definitions/AirportOutput"
        },
        "ArrivalAirport": {
          "$ref": "#/definitions/AirportOutput"
        },
        "Aircraft": {
          "$ref": "#/definitions/AircraftOutput"
        },
        "DayNightSequence": {
          "$ref": "#/definitions/DayNightSequences"
        },
        "DayTakeoffs": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "maximum": 100.0,
          "minimum": 0.0
        },
        "DayLandings": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "maximum": 100.0,
          "minimum": 0.0
        },
        "FlightTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{1-5}:[0-5][0-9]$"
        },
        "AirborneTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{1-5}:[0-5][0-9]$"
        },
        "SinglePilotSingleEngineTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{1-5}:[0-5][0-9]$"
        },
        "SinglePilotMultiEngineTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{1-5}:[0-5][0-9]$"
        },
        "MultiPilotTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{1-5}:[0-5][0-9]$"
        },
        "PICTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{1-5}:[0-5][0-9]$"
        },
        "DualTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{1-5}:[0-5][0-9]$"
        },
        "CopiTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{1-5}:[0-5][0-9]$"
        },
        "InstructorTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{1-5}:[0-5][0-9]$"
        },
        "VFRTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{1-5}:[0-5][0-9]$"
        },
        "IFRTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{1-5}:[0-5][0-9]$"
        },
        "DayTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{1-5}:[0-5][0-9]$"
        },
        "NightTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{1-5}:[0-5][0-9]$"
        }
      }
    },
    "FlightTypes": {
      "type": "string",
      "description": "",
      "x-enumFlags": true,
      "x-enumNames": [
        "VFR",
        "IFR",
        "Y",
        "Z",
        "VFR_IFR_VFR",
        "IFR_VFR_IFR"
      ],
      "enum": [
        "VFR",
        "IFR",
        "Y",
        "Z",
        "VFR_IFR_VFR",
        "IFR_VFR_IFR"
      ]
    },
    "AircraftOutput": {
      "type": "object",
      "required": [
        "Registration",
        "ICAODesignator"
      ],
      "properties": {
        "Registration": {
          "type": "string",
          "minLength": 1
        },
        "Variant": {
          "type": "string",
          "description": "The variant of the aircraft, in case several variants are available for the provided registration in capzlog.aero. If no variant is specified and there are multiple variants for the provided registration in capzlog.aero, one is selected randomly"
        },
        "ICAODesignator": {
          "type": "string",
          "minLength": 1
        }
      }
    },
    "ExternalSystemFlightInput": {
      "allOf": [
        {
          "$ref": "#/definitions/FlightInputBase"
        },
        {
          "type": "object",
          "description": "Represents a flight to be created in capzlog.aero",
          "required": [
            "ExternalSystemUniqueID",
            "IsLastFlightOfDay"
          ],
          "properties": {
            "ExternalSystemUniqueID": {
              "type": "string",
              "minLength": 1,
              "pattern": "^\\w{1-100}$"
            },
            "IsLastFlightOfDay": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "FlightInputBase": {
      "type": "object",
      "description": "Represents a flight to be created in capzlog.aero",
      "x-abstract": true,
      "required": [
        "Date",
        "AreTimesLocal",
        "OffBlockTime",
        "OnBlockTime",
        "PICName",
        "NightTakeoffs",
        "NightLandings",
        "IFRDepartures",
        "IFRApproaches",
        "TypeOfFlight",
        "PilotFunction",
        "DepartureAirport",
        "ArrivalAirport",
        "AutoCalculateDayNightTime",
        "Takeoffs",
        "Landings"
      ],
      "properties": {
        "Date": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\d{4}\\-(0[1-9]|1[0-2])\\-(0[1-9]|[1-2][0-9]|3[0-1])$"
        },
        "AreTimesLocal": {
          "type": "boolean",
          "default": false
        },
        "OffBlockTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"
        },
        "OnBlockTime": {
          "type": "string",
          "minLength": 1,
          "pattern": "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"
        },
        "TakeoffTime": {
          "type": "string",
          "pattern": "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"
        },
        "LandingTime": {
          "type": "string",
          "pattern": "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"
        },
        "PICName": {
          "type": "string",
          "minLength": 1
        },
        "NightTakeoffs": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "maximum": 100.0,
          "minimum": 0.0
        },
        "NightLandings": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "maximum": 100.0,
          "minimum": 0.0
        },
        "IFRDepartures": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "maximum": 100.0,
          "minimum": 0.0
        },
        "IFRApproaches": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "maximum": 100.0,
          "minimum": 0.0
        },
        "MorningTwilightTime": {
          "type": "string",
          "pattern": "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"
        },
        "EveningTwilightTime": {
          "type": "string",
          "pattern": "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"
        },
        "TypeOfFlight": {
          "$ref": "#/definitions/FlightTypes"
        },
        "ChangeVFRToIFRTime": {
          "type": "string",
          "pattern": "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"
        },
        "ChangeIFRToVFRTime": {
          "type": "string",
          "pattern": "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"
        },
        "PilotFunction": {
          "$ref": "#/definitions/PilotFunctions"
        },
        "Remark": {
          "type": "string"
        },
        "AircraftCounterStart": {
          "type": "string",
          "description": "The start value of the aircraft counter. If provided, AircraftCounterEnd must also be provided. The time between AircraftCounterStart and AircraftCounterEnd must be less than the flight time and equal to the airborne time if it is provided",
          "pattern": "^\\d{1-5}:[0-5][0-9]$"
        },
        "AircraftCounterEnd": {
          "type": "string",
          "description": "The end value of the aircraft counter. If provided, AircraftCounterStart must also be provided. The time between AircraftCounterStart and AircraftCounterEnd must be less than the flight time and equal to the airborne time if it is provided",
          "pattern": "^\\d{1-5}:[0-5][0-9]$"
        },
        "IsMultiPilot": {
          "type": "boolean",
          "description": "Used to specify if the flight is single pilot or multi pilot operation. Considered only for aircraft that can be flown both single and multi pilot"
        },
        "Markers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Marker"
          }
        },
        "DepartureAirport": {
          "$ref": "#/definitions/AirportInput"
        },
        "ArrivalAirport": {
          "$ref": "#/definitions/AirportInput"
        },
        "Aircraft": {
          "$ref": "#/definitions/AircraftInput"
        },
        "AutoCalculateDayNightTime": {
          "type": "boolean",
          "description": "If set to true, the day/night limits are calculated by capzlog.aero; no twilight values should be provided; works only with UTC times or in CET time zone. If set to false, the day/night limits should be provided as twilight values; if none are provided, the flight is considered day.",
          "default": true
        },
        "DayNightSequence": {
          "description": "The day/night sequence of the flight. Required if AutoCalculateDayNightTime is false",
          "allOf": [
            {
              "$ref": "#/definitions/DayNightSequences"
            }
          ]
        },
        "Takeoffs": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "maximum": 100.0,
          "minimum": 0.0
        },
        "Landings": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "maximum": 100.0,
          "minimum": 0.0
        }
      }
    },
    "AircraftInput": {
      "type": "object",
      "required": [
        "Registration"
      ],
      "properties": {
        "Registration": {
          "type": "string",
          "minLength": 1
        },
        "Variant": {
          "type": "string",
          "description": "The variant of the aircraft, in case several variants are available for the provided registration in capzlog.aero. If no variant is specified and there are multiple variants for the provided registration in capzlog.aero, one is selected randomly"
        },
        "ICAODesignator": {
          "type": "string",
          "description": "Required for new/non-existing aircraft"
        }
      }
    }
  },
  "securityDefinitions": {
    "ApiKey": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}
